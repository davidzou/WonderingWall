[
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 1596,
        "id": "material.FittedBox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FittedBox",
        "file": "material.FittedBox.1.dart",
        "description": "In this example, the image is stretched to fill the entire [Container], which would\nnot happen normally without using FittedBox."
    },
    {
        "sourcePath": "lib/src/material/material_state.dart",
        "sourceLine": 235,
        "id": "material.MaterialStateMouseCursor.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "MaterialStateMouseCursor",
        "file": "material.MaterialStateMouseCursor.1.dart",
        "description": "This example defines a mouse cursor that resolves to\n[SystemMouseCursors.forbidden] when its widget is disabled."
    },
    {
        "sourcePath": "lib/src/widgets/animated_size.dart",
        "sourceLine": 51,
        "id": "widgets.AnimatedSize.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedSize",
        "file": "widgets.AnimatedSize.1.dart",
        "description": "This example makes a [Container] react to being touched, causing the child\nof the [AnimatedSize] widget, here a [FlutterLogo], to animate."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "cupertino.Focus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Focus",
        "file": "cupertino.Focus.1.dart",
        "description": "This example shows how to manage focus using the [Focus] and [FocusScope]\nwidgets. See [FocusNode] for a similar example that doesn't use [Focus] or\n[FocusScope]."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1161,
        "id": "material.DecoratedBoxTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DecoratedBoxTransition",
        "file": "material.DecoratedBoxTransition.1.dart",
        "description": "The following code implements the [DecoratedBoxTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 1097,
        "id": "cupertino.PhysicalShape.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "PhysicalShape",
        "file": "cupertino.PhysicalShape.1.dart",
        "description": "This example shows how to use a [PhysicalShape] on a centered [SizedBox]\nto clip it to a rounded rectangle using a [ShapeBorderClipper] and give it\nan orange color along with a shadow."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 2860,
        "id": "material.ScaffoldState.showBottomSheet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldState.showBottomSheet",
        "file": "material.ScaffoldState.showBottomSheet.1.dart",
        "description": "This example demonstrates how to use `showBottomSheet` to display a\nbottom sheet when a user taps a button. It also demonstrates how to\nclose a bottom sheet using the Navigator."
    },
    {
        "sourcePath": "lib/src/material/expansion_panel.dart",
        "sourceLine": 322,
        "id": "material.ExpansionPanelList.radio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ExpansionPanelList.radio",
        "file": "material.ExpansionPanelList.radio.1.dart",
        "description": "Here is a simple example of how to implement ExpansionPanelList.radio."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 192,
        "id": "Dart.dart:ui.FontFeature.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature",
        "file": "Dart.dart:ui.FontFeature.1.dart",
        "description": "This example shows usage of several OpenType font features,\nincluding Small Caps (selected manually using the \"smcp\" code),\nold-style figures, fractional ligatures, and stylistic sets."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 290,
        "id": "material.LogicalKeySet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "LogicalKeySet",
        "file": "material.LogicalKeySet.1.dart",
        "description": "In the following example, the counter is increased when the following key\nsequences are pressed:\n\n * Control left, then C.\n * Control right, then C.\n * C, then Control left.\n\nBut not when:\n\n * Control left, then A, then C."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 215,
        "id": "cupertino.SingleChildScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "SingleChildScrollView",
        "file": "cupertino.SingleChildScrollView.2.dart",
        "description": "In this example, the column becomes either as big as viewport, or as big as\nthe contents, whichever is biggest."
    },
    {
        "sourcePath": "lib/src/cupertino/route.dart",
        "sourceLine": 1187,
        "id": "cupertino.showCupertinoModalPopup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "showCupertinoModalPopup",
        "file": "cupertino.showCupertinoModalPopup.1.dart",
        "description": "This sample demonstrates how to create a restorable Cupertino modal route.\nThis is accomplished by enabling state restoration by specifying\n[CupertinoApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [CupertinoModalPopupRoute] when the [CupertinoButton] is tapped.\n\n{@macro flutter.widgets.RestorationManager}"
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 701,
        "id": "cupertino.Actions.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Actions",
        "file": "cupertino.Actions.1.dart",
        "description": "This example creates a custom [Action] subclass `ModifyAction` for modifying\na model, and another, `SaveAction` for saving it.\n\nThis example demonstrates passing arguments to the [Intent] to be carried to\nthe [Action]. Actions can get data either from their own construction (like\nthe `model` in this example), or from the intent passed to them when invoked\n(like the increment `amount` in this example).\n\nThis example also demonstrates how to use Intents to limit a widget's\ndependencies on its surroundings. The `SaveButton` widget defined in this\nexample can invoke actions defined in its ancestor widgets, which can be\ncustomized to match the part of the widget tree that it is in. It doesn't\nneed to know about the `SaveAction` class, only the `SaveIntent`, and it\nonly needs to know about a value notifier, not the entire model."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 942,
        "id": "material.PositionedTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "PositionedTransition",
        "file": "material.PositionedTransition.1.dart",
        "description": "The following code implements the [PositionedTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "cupertino.RawAutocomplete.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "RawAutocomplete",
        "file": "cupertino.RawAutocomplete.2.dart",
        "description": "This example is similar to the previous example, but it uses a custom T data\ntype instead of directly using String."
    },
    {
        "sourcePath": "lib/src/material/bottom_sheet.dart",
        "sourceLine": 688,
        "id": "material.showModalBottomSheet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "showModalBottomSheet",
        "file": "material.showModalBottomSheet.1.dart",
        "description": "This example demonstrates how to use `showModalBottomSheet` to display a\nbottom sheet that obscures the content behind it when a user taps a button.\nIt also demonstrates how to close the bottom sheet using the [Navigator]\nwhen a user taps on a button inside the bottom sheet."
    },
    {
        "sourcePath": "lib/src/animation/curves.dart",
        "sourceLine": 512,
        "id": "widgets.Curve2D.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Curve2D",
        "file": "widgets.Curve2D.1.dart",
        "description": "This example shows how to use a [Curve2D] to modify the position of a widget\nso that it can follow an arbitrary path."
    },
    {
        "sourcePath": "lib/src/material/switch_list_tile.dart",
        "sourceLine": 248,
        "id": "material.SwitchListTile.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "SwitchListTile",
        "file": "material.SwitchListTile.3.dart",
        "description": "![Custom switch list tile sample](https://flutter.github.io/assets-for-api-docs/assets/material/switch_list_tile_custom.png)\n\nHere is an example of a custom LabeledSwitch widget, but you can easily\nmake your own configurable widget."
    },
    {
        "sourcePath": "lib/src/material/divider.dart",
        "sourceLine": 279,
        "id": "material.VerticalDivider.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "VerticalDivider",
        "file": "material.VerticalDivider.1.dart",
        "description": "This sample shows how to display a [VerticalDivider] between an purple and orange box\ninside a [Row]. The [VerticalDivider] is 20 logical pixels in width and contains a\nhorizontally centered black line that is 1 logical pixels thick. The grey\nline is indented by 20 logical pixels."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1641,
        "id": "material.Scaffold.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "file": "material.Scaffold.3.dart",
        "description": "This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a\n[FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order\nto center the text within the [Scaffold]. The [FloatingActionButton] is\ncentered and docked within the [BottomAppBar] using\n[FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is\nconnected to a callback that increments a counter.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)"
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 1461,
        "id": "cupertino.Navigator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Navigator",
        "file": "cupertino.Navigator.1.dart",
        "description": "The following example demonstrates how a nested [Navigator] can be used to\npresent a standalone user registration journey.\n\nEven though this example uses two [Navigator]s to demonstrate nested\n[Navigator]s, a similar result is possible using only a single [Navigator].\n\nRun this example with `flutter run --route=/signup` to start it with\nthe signup flow instead of on the home page."
    },
    {
        "sourcePath": "lib/src/widgets/drag_target.dart",
        "sourceLine": 241,
        "id": "widgets.Draggable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Draggable",
        "file": "widgets.Draggable.1.dart",
        "description": "The following example has a [Draggable] widget along with a [DragTarget]\nin a row demonstrating an incremented `acceptedData` integer value when\nyou drag the element to the target."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1342,
        "id": "Dart.dart:ui.FontFeature.swash.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.swash",
        "file": "Dart.dart:ui.FontFeature.swash.1.dart",
        "description": "The BioRhyme Expanded font supports the `swsh` feature specifically\nfor the capital \"Q\" and \"R\" glyphs and the ampersand.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_swsh.png)"
    },
    {
        "sourcePath": "lib/src/widgets/scroll_view.dart",
        "sourceLine": 618,
        "id": "widgets.CustomScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "CustomScrollView",
        "file": "widgets.CustomScrollView.2.dart",
        "description": "By default, if items are inserted at the \"top\" of a scrolling container like\n[ListView] or [CustomScrollView], the top item and all of the items below it\nare scrolled downwards. In some applications, it's preferable to have the\ntop of the list just grow upwards, without changing the scroll position.\nThis example demonstrates how to do that with a [CustomScrollView] with\ntwo [SliverList] children, and the [CustomScrollView.center] set to the key\nof the bottom SliverList. The top one SliverList will grow upwards, and the\nbottom SliverList will grow downwards."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1150,
        "id": "material.AnimatedPositioned.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedPositioned",
        "file": "material.AnimatedPositioned.1.dart",
        "description": "The following example transitions an AnimatedPositioned\nbetween two states. It adjusts the `height`, `width`, and\n[Positioned] properties when tapped."
    },
    {
        "sourcePath": "lib/src/widgets/color_filter.dart",
        "sourceLine": 59,
        "id": "widgets.ColorFiltered.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "ColorFiltered",
        "file": "widgets.ColorFiltered.1.dart",
        "description": "These two images have two [ColorFilter]s applied with different [BlendMode]s,\none with red color and [BlendMode.modulate] another with a grey color and [BlendMode.saturation]."
    },
    {
        "sourcePath": "lib/src/widgets/will_pop_scope.dart",
        "sourceLine": 92,
        "id": "material.WillPopScope.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "WillPopScope",
        "file": "material.WillPopScope.2.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/image.dart",
        "sourceLine": 900,
        "id": "widgets.Image.errorBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Image.errorBuilder",
        "file": "widgets.Image.errorBuilder.1.dart",
        "description": "The following sample uses [errorBuilder] to show a '😢' in place of the\nimage that fails to load, and prints the error to the console."
    },
    {
        "sourcePath": "lib/src/material/checkbox_list_tile.dart",
        "sourceLine": 245,
        "id": "material.CheckboxListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "CheckboxListTile",
        "file": "material.CheckboxListTile.1.dart",
        "description": "![CheckboxListTile sample](https://flutter.github.io/assets-for-api-docs/assets/material/checkbox_list_tile.png)\n\nThis widget shows a checkbox that, when checked, slows down all animations\n(including the animation of the checkbox itself getting checked!).\n\nThis sample requires that you also import 'package:flutter/scheduler.dart',\nso that you can reference [timeDilation]."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "widgets.NestedScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "NestedScrollView",
        "file": "widgets.NestedScrollView.2.dart",
        "description": "This simple example shows a [NestedScrollView] whose header contains a\nfloating [SliverAppBar]. By using the [floatHeaderSlivers] property, the\nfloating behavior is coordinated between the outer and inner [Scrollable]s,\nso it behaves as it would in a single scrollable."
    },
    {
        "sourcePath": "lib/src/material/app_bar.dart",
        "sourceLine": 1530,
        "id": "material.SliverAppBar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SliverAppBar",
        "file": "material.SliverAppBar.2.dart",
        "description": "This sample shows a [SliverAppBar] and it's behavior when using the\n[pinned], [snap] and [floating] parameters."
    },
    {
        "sourcePath": "lib/src/services/system_chrome.dart",
        "sourceLine": 617,
        "id": "services.SystemChrome.setSystemUIOverlayStyle.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "services",
        "element": "SystemChrome.setSystemUIOverlayStyle",
        "file": "services.SystemChrome.setSystemUIOverlayStyle.2.dart",
        "description": "The following example creates a widget that changes the status bar color\nto a random value on Android."
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 350,
        "id": "material.ActionListener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ActionListener",
        "file": "material.ActionListener.1.dart",
        "description": "This example shows how ActionListener handles adding and removing of\nthe [listener] in the widget lifecycle."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 550,
        "id": "widgets.NestedScrollViewState.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "NestedScrollViewState",
        "file": "widgets.NestedScrollViewState.1.dart",
        "description": "[NestedScrollViewState] can be obtained using a [GlobalKey].\nUsing the following setup, you can access the inner scroll controller\nusing `globalKey.currentState.innerController`."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 915,
        "id": "Dart.dart:ui.FontFeature.oldstyleFigures.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.oldstyleFigures",
        "file": "Dart.dart:ui.FontFeature.oldstyleFigures.1.dart",
        "description": "The Piazzolla font supports the `onum` feature. It causes\ndigits to extend below the baseline.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_onum.png)"
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 122,
        "id": "cupertino.GlowingOverscrollIndicator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "GlowingOverscrollIndicator",
        "file": "cupertino.GlowingOverscrollIndicator.1.dart",
        "description": "This example demonstrates how to use a [NotificationListener] to manipulate\nthe placement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/cupertino/context_menu.dart",
        "sourceLine": 121,
        "id": "cupertino.CupertinoContextMenu.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoContextMenu",
        "file": "cupertino.CupertinoContextMenu.1.dart",
        "description": "This sample shows a very simple CupertinoContextMenu for an empty red\n100x100 Container. Simply long press on it to open."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 473,
        "id": "Dart.dart:ui.FontFeature.characterVariant.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.characterVariant",
        "file": "Dart.dart:ui.FontFeature.characterVariant.1.dart",
        "description": "The Source Code Pro font supports the `cvXX` feature for several\ncharacters. In the example below, variants 1 (`cv01`), 2\n(`cv02`), and 4 (`cv04`) are selected. Variant 1 changes the\nrendering of the \"a\" character, variant 2 changes the lowercase\n\"g\" character, and variant 4 changes the lowercase \"i\" and \"l\"\ncharacters. There are also variants (not shown here) that\ncontrol the rendering of various greek characters such as beta\nand theta.\n\nNotably, this can be contrasted with the stylistic sets, where\nthe set which affects the \"a\" character also affects beta, and\nthe set which affects the \"g\" character also affects theta and\ndelta.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_cvXX.png)"
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1292,
        "id": "Dart.dart:ui.FontFeature.superscripts.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.superscripts",
        "file": "Dart.dart:ui.FontFeature.superscripts.1.dart",
        "description": "The Sorts Mill Goudy font supports the `sups` feature. It causes\ndigits to be smaller, superscripted, and changes them to lining\nfigures (so they are all the same height).\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_sups.png)"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 2781,
        "id": "widgets.FractionallySizedBox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FractionallySizedBox",
        "file": "widgets.FractionallySizedBox.1.dart",
        "description": "This sample shows a [FractionallySizedBox] whose one child is 50% of\nthe box's size per the width and height factor parameters, and centered\nwithin that box by the alignment parameter."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 1097,
        "id": "widgets.PhysicalShape.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "PhysicalShape",
        "file": "widgets.PhysicalShape.1.dart",
        "description": "This example shows how to use a [PhysicalShape] on a centered [SizedBox]\nto clip it to a rounded rectangle using a [ShapeBorderClipper] and give it\nan orange color along with a shadow."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 956,
        "id": "Dart.dart:ui.FontFeature.ordinalForms.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.ordinalForms",
        "file": "Dart.dart:ui.FontFeature.ordinalForms.1.dart",
        "description": "The Piazzolla font supports the `ordn` feature. It causes\nalphabetic glyphs to become smaller and superscripted.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_ordn.png)"
    },
    {
        "sourcePath": "lib/src/widgets/preferred_size.dart",
        "sourceLine": 125,
        "id": "material.PreferredSize.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "PreferredSize",
        "file": "material.PreferredSize.1.dart",
        "description": "This sample shows a custom widget, similar to an [AppBar], which uses a\n[PreferredSize] widget, with its height set to 80 logical pixels.\nChanging the [PreferredSize] can be used to change the height\nof the custom app bar."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2508,
        "id": "material.InputDecoration.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.2.dart",
        "description": "This sample shows how to style a \"collapsed\" `TextField` using an\n`InputDecorator`. The collapsed `TextField` surrounds the hint text and\ninput area with a border, but does not add padding around them.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_collapsed.png)"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "cupertino.AspectRatio.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "cupertino",
        "element": "AspectRatio",
        "file": "cupertino.AspectRatio.3.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 809,
        "id": "widgets.TransitionDelegate.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TransitionDelegate",
        "file": "widgets.TransitionDelegate.1.dart",
        "description": "The following example demonstrates how to implement a subclass that always\nremoves or adds routes without animated transitions and puts the removed\nroutes at the top of the list."
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 122,
        "id": "widgets.GlowingOverscrollIndicator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "GlowingOverscrollIndicator",
        "file": "widgets.GlowingOverscrollIndicator.1.dart",
        "description": "This example demonstrates how to use a [NotificationListener] to manipulate\nthe placement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "rendering.SliverGridDelegateWithFixedCrossAxisCount.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "rendering",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "rendering.SliverGridDelegateWithFixedCrossAxisCount.1.dart",
        "description": "Here is an example using the [childAspectRatio] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 100.0."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 114,
        "id": "cupertino.AnimatedWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedWidget",
        "file": "cupertino.AnimatedWidget.1.dart",
        "description": "This code defines a widget called `Spinner` that spins a green square\ncontinually. It is built with an [AnimatedWidget]."
    },
    {
        "sourcePath": "lib/src/material/stepper.dart",
        "sourceLine": 170,
        "id": "material.Stepper.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Stepper",
        "file": "material.Stepper.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/gesture_detector.dart",
        "sourceLine": 219,
        "id": "cupertino.GestureDetector.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "GestureDetector",
        "file": "cupertino.GestureDetector.2.dart",
        "description": "This example uses a [Container] that wraps a [GestureDetector] widget which\ndetects a tap.\n\nSince the [GestureDetector] does not have a child, it takes on the size of its\nparent, making the entire area of the surrounding [Container] clickable. When\ntapped, the [Container] turns yellow by setting the `_color` field. When\ntapped again, it goes back to white."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1067,
        "id": "Dart.dart:ui.FontFeature.stylisticAlternates.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.stylisticAlternates",
        "file": "Dart.dart:ui.FontFeature.stylisticAlternates.1.dart",
        "description": "The Source Code Pro font supports the `salt` feature. It causes\nsome glyphs to be rendered differently, for example the \"a\" and\n\"g\" glyphs change from their typographically common\ndouble-storey forms to simpler single-storey forms, the dollar\nsign's line changes from discontinuous to continuous (and is\nangled), and the \"0\" rendering changes from a center dot to a\nslash.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_salt.png)"
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 2383,
        "id": "material.BuildOwner.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "BuildOwner",
        "file": "material.BuildOwner.1.dart",
        "description": "This example shows how to build an off-screen widget tree used to measure\nthe layout size of the rendered tree. For some use cases, the simpler\n[Offstage] widget may be a better alternative to this approach."
    },
    {
        "sourcePath": "lib/src/services/keyboard_key.dart",
        "sourceLine": 3631,
        "id": "services.PhysicalKeyboardKey.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "services",
        "element": "PhysicalKeyboardKey",
        "file": "services.PhysicalKeyboardKey.1.dart",
        "description": "This example shows how to detect if the user has selected the physical key\nto the right of the CAPS LOCK key."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "material.RawScrollbar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RawScrollbar",
        "file": "material.RawScrollbar.1.dart",
        "description": "This sample shows an app with two scrollables in the same route. Since by\ndefault, there is one [PrimaryScrollController] per route, and they both have a\nscroll direction of [Axis.vertical], they would both try to attach to that\ncontroller. The [Scrollbar] cannot support multiple positions attached to\nthe same controller, so one [ListView], and its [Scrollbar] have been\nprovided a unique [ScrollController].\n\nAlternatively, a new PrimaryScrollController could be created above one of\nthe [ListView]s."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5256,
        "id": "material.Expanded.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Expanded",
        "file": "material.Expanded.2.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Row] with multiple\nchildren expanded, utilizing the [flex] factor to prioritize available space.\n\n![This results in a wide amber box, followed by a thin blue box, with a medium width amber box at the end.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_row.png)"
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 488,
        "id": "widgets.StreamBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "StreamBuilder",
        "file": "widgets.StreamBuilder.1.dart",
        "description": "This sample shows a [StreamBuilder] that listens to a Stream that emits bids\nfor an auction. Every time the StreamBuilder receives a bid from the Stream,\nit will display the price of the bid below an icon. If the Stream emits an\nerror, the error is displayed below an error icon. When the Stream finishes\nemitting bids, the final price is displayed."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 270,
        "id": "cupertino.AnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedList",
        "file": "cupertino.AnimatedList.1.dart",
        "description": "This sample application uses an [AnimatedList] to create an effect when\nitems are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/widgets/page_view.dart",
        "sourceLine": 607,
        "id": "cupertino.PageView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "PageView",
        "file": "cupertino.PageView.1.dart",
        "description": "Here is an example of [PageView]. It creates a centered [Text] in each of the three pages\nwhich scroll horizontally."
    },
    {
        "sourcePath": "lib/src/painting/gradient.dart",
        "sourceLine": 362,
        "id": "material.LinearGradient.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "LinearGradient",
        "file": "material.LinearGradient.1.dart",
        "description": "This sample draws a picture that looks like vertical window shades by having\na [Container] display a [BoxDecoration] with a [LinearGradient]."
    },
    {
        "sourcePath": "lib/src/widgets/overflow_bar.dart",
        "sourceLine": 96,
        "id": "material.OverflowBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "OverflowBar",
        "file": "material.OverflowBar.1.dart",
        "description": "This example defines a simple approximation of a dialog\nlayout, where the layout of the dialog's action buttons are\ndefined by an [OverflowBar]. The content is wrapped in a\n[SingleChildScrollView], so that if overflow occurs, the\naction buttons will still be accessible by scrolling,\nno matter how much vertical space is available."
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1665,
        "id": "material.FocusTraversalGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FocusTraversalGroup",
        "file": "material.FocusTraversalGroup.1.dart",
        "description": "This sample shows three rows of buttons, each grouped by a\n[FocusTraversalGroup], each with different traversal order policies. Use tab\ntraversal to see the order they are traversed in.  The first row follows a\nnumerical order, the second follows a lexical order (ordered to traverse\nright to left), and the third ignores the numerical order assigned to it and\ntraverses in widget order."
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 686,
        "id": "widgets.FutureBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FutureBuilder",
        "file": "widgets.FutureBuilder.1.dart",
        "description": "This sample shows a [FutureBuilder] that displays a loading spinner while it\nloads data. It displays a success icon and text if the [Future] completes\nwith a result, or an error icon and text if the [Future] completes with an\nerror. Assume the `_calculation` field is set by pressing a button elsewhere\nin the UI."
    },
    {
        "sourcePath": "lib/src/material/list_tile.dart",
        "sourceLine": 747,
        "id": "material.ListTile.6",
        "channel": "stable",
        "serial": "6",
        "package": "flutter",
        "library": "material",
        "element": "ListTile",
        "file": "material.ListTile.6.dart",
        "description": "Here is an example of an article list item with multiline titles and\nsubtitles. It utilizes [Row]s and [Column]s, as well as [Expanded] and\n[AspectRatio] widgets to organize its layout.\n\n![Custom list item b](https://flutter.github.io/assets-for-api-docs/assets/widgets/custom_list_item_b.png)"
    },
    {
        "sourcePath": "lib/src/material/reorderable_list.dart",
        "sourceLine": 172,
        "id": "material.ReorderableListView.builder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ReorderableListView.builder",
        "file": "material.ReorderableListView.builder.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 1031,
        "id": "material.Shortcuts.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Shortcuts",
        "file": "material.Shortcuts.2.dart",
        "description": "This slightly more complicated, but more flexible, example creates a custom\n[Action] subclass to increment and decrement within a widget (a [Column])\nthat has keyboard focus. When the user presses the up and down arrow keys,\nthe counter will increment and decrement a data model using the custom\nactions.\n\nOne thing that this demonstrates is passing arguments to the [Intent] to be\ncarried to the [Action]. This shows how actions can get data either from\ntheir own construction (like the `model` in this example), or from the\nintent passed to them when invoked (like the increment `amount` in this\nexample)."
    },
    {
        "sourcePath": "lib/src/material/card.dart",
        "sourceLine": 99,
        "id": "material.Card.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Card",
        "file": "material.Card.2.dart",
        "description": "This sample shows creation of a [Card] widget that can be tapped. When\ntapped this [Card]'s [InkWell] displays an \"ink splash\" that fills the\nentire card."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 448,
        "id": "cupertino.RotationTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RotationTransition",
        "file": "cupertino.RotationTransition.1.dart",
        "description": "The following code implements the [RotationTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 679,
        "id": "cupertino.FadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FadeTransition",
        "file": "cupertino.FadeTransition.1.dart",
        "description": "The following code implements the [FadeTransition] using\nthe Flutter logo:"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6843,
        "id": "widgets.MouseRegion.onExit.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "MouseRegion.onExit",
        "file": "widgets.MouseRegion.onExit.2.dart",
        "description": "The following example shows a widget that hides its content one second\nafter being hovered, and also exposes the enter and exit callbacks.\nBecause the widget conditionally creates the `MouseRegion`, and leaks the\nhover state, it needs to take the restriction into consideration. In this\ncase, since it has access to the event that triggers the disappearance of\nthe `MouseRegion`, it simply trigger the exit callback during that event\nas well."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "widgets.AspectRatio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AspectRatio",
        "file": "widgets.AspectRatio.1.dart",
        "description": "This examples shows how AspectRatio sets width when its parent's width\nconstraint is infinite. Since its parent's allowed height is a fixed value,\nthe actual width is determined via the given AspectRatio.\n\nSince the height is fixed at 100.0 in this example and the aspect ratio is\nset to 16 / 9, the width should then be 100.0 / 9 * 16."
    },
    {
        "sourcePath": "lib/src/material/checkbox_list_tile.dart",
        "sourceLine": 245,
        "id": "material.CheckboxListTile.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "CheckboxListTile",
        "file": "material.CheckboxListTile.2.dart",
        "description": "![Checkbox list tile semantics sample](https://flutter.github.io/assets-for-api-docs/assets/material/checkbox_list_tile_semantics.png)\n\nHere is an example of a custom labeled checkbox widget, called\nLinkedLabelCheckbox, that includes an interactive [RichText] widget that\nhandles tap gestures."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "cupertino.SliverFillRemaining.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverFillRemaining",
        "file": "cupertino.SliverFillRemaining.4.dart",
        "description": "In this sample the [SliverFillRemaining]'s child stretches to fill the\noverscroll area when [fillOverscroll] is true. This sample also features a\nbutton that is pinned to the bottom of the sliver, regardless of size or\noverscroll behavior. Try switching [fillOverscroll] to see the difference.\n\nThis sample only shows the overscroll behavior on devices that support\noverscroll."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "cupertino.RawScrollbar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "RawScrollbar",
        "file": "cupertino.RawScrollbar.2.dart",
        "description": "This sample shows a [RawScrollbar] that executes a fade animation as\nscrolling occurs. The RawScrollbar will fade into view as the user scrolls,\nand fade out when scrolling stops. The [GridView] uses the\n[PrimaryScrollController] since it has an [Axis.vertical] scroll direction\nand has not been provided a [ScrollController]."
    },
    {
        "sourcePath": "lib/src/material/data_table.dart",
        "sourceLine": 430,
        "id": "material.DataTable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DataTable",
        "file": "material.DataTable.1.dart",
        "description": "This sample shows how to display a [DataTable] with three columns: name, age, and\nrole. The columns are defined by three [DataColumn] objects. The table\ncontains three rows of data for three example users, the data for which\nis defined by three [DataRow] objects.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/data_table.png)"
    },
    {
        "sourcePath": "lib/src/cupertino/route.dart",
        "sourceLine": 1320,
        "id": "cupertino.showCupertinoDialog.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "showCupertinoDialog",
        "file": "cupertino.showCupertinoDialog.1.dart",
        "description": "This sample demonstrates how to create a restorable Cupertino dialog. This is\naccomplished by enabling state restoration by specifying\n[CupertinoApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [CupertinoDialogRoute] when the [CupertinoButton] is tapped.\n\n{@macro flutter.widgets.RestorationManager}"
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 122,
        "id": "material.GlowingOverscrollIndicator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "GlowingOverscrollIndicator",
        "file": "material.GlowingOverscrollIndicator.1.dart",
        "description": "This example demonstrates how to use a [NotificationListener] to manipulate\nthe placement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/widgets/page_storage.dart",
        "sourceLine": 242,
        "id": "material.PageStorage.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "PageStorage",
        "file": "material.PageStorage.1.dart",
        "description": "This sample shows how to explicitly use a [PageStorage] to\nstore the states of its children pages. Each page includes a scrollable\nlist, whose position is preserved when switching between the tabs thanks to\nthe help of [PageStorageKey]."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1361,
        "id": "cupertino.DefaultTextStyleTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "DefaultTextStyleTransition",
        "file": "cupertino.DefaultTextStyleTransition.1.dart",
        "description": "The following code implements the [DefaultTextStyleTransition] that shows\na transition between thick blue font and thin red font."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_notifier.dart",
        "sourceLine": 128,
        "id": "widgets.InheritedNotifier.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InheritedNotifier",
        "file": "widgets.InheritedNotifier.1.dart",
        "description": "This example shows three spinning squares that use the value of the notifier\non an ancestor [InheritedNotifier] (`SpinModel`) to give them their\nrotation. The [InheritedNotifier] doesn't need to know about the children,\nand the `notifier` argument doesn't need to be an animation controller, it\ncan be anything that implements [Listenable] (like a [ChangeNotifier]).\n\nThe `SpinModel` class could just as easily listen to another object (say, a\nseparate object that keeps the value of an input or data model value) that\nis a [Listenable], and get the value from that. The descendants also don't\nneed to have an instance of the [InheritedNotifier] in order to use it, they\njust need to know that there is one in their ancestry. This can help with\ndecoupling widgets from their models."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1487,
        "id": "widgets.AnimatedBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedBuilder",
        "file": "widgets.AnimatedBuilder.1.dart",
        "description": "This code defines a widget that spins a green square continually. It is\nbuilt with an [AnimatedBuilder] and makes use of the [child] feature to\navoid having to rebuild the [Container] each time."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 350,
        "id": "cupertino.ScaleTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "ScaleTransition",
        "file": "cupertino.ScaleTransition.1.dart",
        "description": "The following code implements the [ScaleTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5256,
        "id": "cupertino.Expanded.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "Expanded",
        "file": "cupertino.Expanded.2.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Row] with multiple\nchildren expanded, utilizing the [flex] factor to prioritize available space.\n\n![This results in a wide amber box, followed by a thin blue box, with a medium width amber box at the end.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_row.png)"
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 701,
        "id": "widgets.Actions.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Actions",
        "file": "widgets.Actions.1.dart",
        "description": "This example creates a custom [Action] subclass `ModifyAction` for modifying\na model, and another, `SaveAction` for saving it.\n\nThis example demonstrates passing arguments to the [Intent] to be carried to\nthe [Action]. Actions can get data either from their own construction (like\nthe `model` in this example), or from the intent passed to them when invoked\n(like the increment `amount` in this example).\n\nThis example also demonstrates how to use Intents to limit a widget's\ndependencies on its surroundings. The `SaveButton` widget defined in this\nexample can invoke actions defined in its ancestor widgets, which can be\ncustomized to match the part of the widget tree that it is in. It doesn't\nneed to know about the `SaveAction` class, only the `SaveIntent`, and it\nonly needs to know about a value notifier, not the entire model."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 2430,
        "id": "material.ScaffoldState.showSnackBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldState.showSnackBar",
        "file": "material.ScaffoldState.showSnackBar.1.dart",
        "description": "Here is an example of showing a [SnackBar] when the user presses a button."
    },
    {
        "sourcePath": "lib/src/material/tabs.dart",
        "sourceLine": 693,
        "id": "material.TabBar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "TabBar",
        "file": "material.TabBar.2.dart",
        "description": "[TabBar] can also be implemented by using a [TabController] which provides more options\nto control the behavior of the [TabBar] and [TabBarView]. This can be used instead of\na [DefaultTabController], demonstrated below."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1641,
        "id": "material.Scaffold.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "file": "material.Scaffold.1.dart",
        "description": "This example shows a [Scaffold] with a [body] and [FloatingActionButton].\nThe [body] is a [Text] placed in a [Center] in order to center the text\nwithin the [Scaffold]. The [FloatingActionButton] is connected to a\ncallback that increments a counter.\n\n![The Scaffold has a white background with a blue AppBar at the top. A blue FloatingActionButton is positioned at the bottom right corner of the Scaffold.](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold.png)"
    },
    {
        "sourcePath": "lib/src/painting/gradient.dart",
        "sourceLine": 362,
        "id": "painting.LinearGradient.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "painting",
        "element": "LinearGradient",
        "file": "painting.LinearGradient.1.dart",
        "description": "This sample draws a picture that looks like vertical window shades by having\na [Container] display a [BoxDecoration] with a [LinearGradient]."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3179,
        "id": "material.Offstage.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Offstage",
        "file": "material.Offstage.1.dart",
        "description": "This example shows a [FlutterLogo] widget when the `_offstage` member field\nis false, and hides it without any room in the parent when it is true. When\noffstage, this app displays a button to get the logo size, which will be\ndisplayed in a [SnackBar]."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "widgets.AspectRatio.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "AspectRatio",
        "file": "widgets.AspectRatio.2.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/material/floating_action_button.dart",
        "sourceLine": 131,
        "id": "material.FloatingActionButton.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "FloatingActionButton",
        "file": "material.FloatingActionButton.2.dart",
        "description": "This example shows how to make an extended [FloatingActionButton] in a\n[Scaffold], with a  pink [backgroundColor], a thumbs up [Icon] and a\n[Text] label that reads \"Approve\".\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/floating_action_button_label.png)"
    },
    {
        "sourcePath": "lib/src/widgets/gesture_detector.dart",
        "sourceLine": 219,
        "id": "cupertino.GestureDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "GestureDetector",
        "file": "cupertino.GestureDetector.1.dart",
        "description": "This example contains a black light bulb wrapped in a [GestureDetector]. It\nturns the light bulb yellow when the \"TURN LIGHT ON\" button is tapped by\nsetting the `_lights` field, and off again when \"TURN LIGHT OFF\" is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 623,
        "id": "widgets.AnimatedContainer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedContainer",
        "file": "widgets.AnimatedContainer.1.dart",
        "description": "The following example (depicted above) transitions an AnimatedContainer\nbetween two states. It adjusts the `height`, `width`, `color`, and\n[alignment] properties when tapped."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 809,
        "id": "material.TransitionDelegate.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "TransitionDelegate",
        "file": "material.TransitionDelegate.1.dart",
        "description": "The following example demonstrates how to implement a subclass that always\nremoves or adds routes without animated transitions and puts the removed\nroutes at the top of the list."
    },
    {
        "sourcePath": "lib/src/material/progress_indicator.dart",
        "sourceLine": 567,
        "id": "material.CircularProgressIndicator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "CircularProgressIndicator",
        "file": "material.CircularProgressIndicator.1.dart",
        "description": "This example shows a [CircularProgressIndicator] with a changing value."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1195,
        "id": "Dart.dart:ui.FontFeature.stylisticSet.2",
        "channel": "stable",
        "serial": "2",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.stylisticSet",
        "file": "Dart.dart:ui.FontFeature.stylisticSet.2.dart",
        "description": "The Piazzolla font supports the `ssXX` feature for for more\nelaborate stylistic effects. Set 1 turns some Latin characters\ninto Roman numerals, set 2 enables some ASCII characters to be\nused to create pretty arrows, and so forth.\n\n_These_ stylistic sets do _not_ correspond to character variants.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_ssXX_2.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 114,
        "id": "material.AnimatedWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedWidget",
        "file": "material.AnimatedWidget.1.dart",
        "description": "This code defines a widget called `Spinner` that spins a green square\ncontinually. It is built with an [AnimatedWidget]."
    },
    {
        "sourcePath": "lib/src/widgets/form.dart",
        "sourceLine": 74,
        "id": "widgets.Form.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Form",
        "file": "widgets.Form.1.dart",
        "description": "This example shows a [Form] with one [TextFormField] to enter an email\naddress and an [ElevatedButton] to submit the form. A [GlobalKey] is used here\nto identify the [Form] and validate input.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/widgets/form.png)"
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1665,
        "id": "widgets.FocusTraversalGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusTraversalGroup",
        "file": "widgets.FocusTraversalGroup.1.dart",
        "description": "This sample shows three rows of buttons, each grouped by a\n[FocusTraversalGroup], each with different traversal order policies. Use tab\ntraversal to see the order they are traversed in.  The first row follows a\nnumerical order, the second follows a lexical order (ordered to traverse\nright to left), and the third ignores the numerical order assigned to it and\ntraverses in widget order."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 798,
        "id": "cupertino.SliverFadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverFadeTransition",
        "file": "cupertino.SliverFadeTransition.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] that uses a\n[SliverFadeTransition] to fade the list in and out."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 924,
        "id": "cupertino.FocusScope.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FocusScope",
        "file": "cupertino.FocusScope.1.dart",
        "description": "This example demonstrates using a [FocusScope] to restrict focus to a particular\nportion of the app. In this case, restricting focus to the visible part of a\nStack."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "material.RawAutocomplete.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "RawAutocomplete",
        "file": "material.RawAutocomplete.3.dart",
        "description": "This example shows the use of RawAutocomplete in a form."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 776,
        "id": "material.SliverAnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SliverAnimatedList",
        "file": "material.SliverAnimatedList.1.dart",
        "description": "This sample application uses a [SliverAnimatedList] to create an animated\neffect when items are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/material/floating_action_button_location.dart",
        "sourceLine": 495,
        "id": "material.StandardFabLocation.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "StandardFabLocation",
        "file": "material.StandardFabLocation.1.dart",
        "description": "This is an example of a user-defined [FloatingActionButtonLocation].\n\nThe example shows a [Scaffold] with an [AppBar], a [BottomAppBar], and a\n[FloatingActionButton] using a custom [FloatingActionButtonLocation].\n\nThe new [FloatingActionButtonLocation] is defined\nby extending [StandardFabLocation] with two mixins,\n[FabEndOffsetX] and [FabFloatOffsetY], and overriding the\n[getOffsetX] method to adjust the FAB's x-coordinate, creating a\n[FloatingActionButtonLocation] slightly different from\n[FloatingActionButtonLocation.endFloat]."
    },
    {
        "sourcePath": "lib/src/widgets/overflow_bar.dart",
        "sourceLine": 96,
        "id": "widgets.OverflowBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "OverflowBar",
        "file": "widgets.OverflowBar.1.dart",
        "description": "This example defines a simple approximation of a dialog\nlayout, where the layout of the dialog's action buttons are\ndefined by an [OverflowBar]. The content is wrapped in a\n[SingleChildScrollView], so that if overflow occurs, the\naction buttons will still be accessible by scrolling,\nno matter how much vertical space is available."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 239,
        "id": "widgets.SlideTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SlideTransition",
        "file": "widgets.SlideTransition.1.dart",
        "description": "The following code implements the [SlideTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 415,
        "id": "Dart.dart:ui.FontFeature.caseSensitiveForms.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.caseSensitiveForms",
        "file": "Dart.dart:ui.FontFeature.caseSensitiveForms.1.dart",
        "description": "The Piazzolla font supports the `case` feature. It causes\nparentheses, brackets, braces, guillemets, slashes, bullets, and\nsome other glyphs (not shown below) to be shifted up slightly so\nthat capital letters appear centered in comparison. When the\nfeature is disabled, those glyphs are optimized for use with\nlowercase letters, and so capital letters appear to ride higher\nrelative to the punctuation marks.\n\nThe difference is very subtle. It may be most obvious when\nexamining the square brackets compared to the capital A.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_case.png)"
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 1031,
        "id": "widgets.Shortcuts.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Shortcuts",
        "file": "widgets.Shortcuts.1.dart",
        "description": "Here, we will use the [Shortcuts] and [Actions] widgets to add and subtract\nfrom a counter. When the child widget has keyboard focus, and a user presses\nthe keys that have been defined in [Shortcuts], the action that is bound\nto the appropriate [Intent] for the key is invoked.\n\nIt also shows the use of a [CallbackAction] to avoid creating a new [Action]\nsubclass."
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 350,
        "id": "widgets.ActionListener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "ActionListener",
        "file": "widgets.ActionListener.1.dart",
        "description": "This example shows how ActionListener handles adding and removing of\nthe [listener] in the widget lifecycle."
    },
    {
        "sourcePath": "lib/src/material/material_state.dart",
        "sourceLine": 345,
        "id": "material.MaterialStateBorderSide.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "MaterialStateBorderSide",
        "file": "material.MaterialStateBorderSide.1.dart",
        "description": "This example defines a subclass of [MaterialStateBorderSide], that resolves\nto a red border side when its widget is selected."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 270,
        "id": "material.AnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedList",
        "file": "material.AnimatedList.1.dart",
        "description": "This sample application uses an [AnimatedList] to create an effect when\nitems are removed or added to the list."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1429,
        "id": "Dart.dart:ui.FontFeature.slashedZero.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.slashedZero",
        "file": "Dart.dart:ui.FontFeature.slashedZero.1.dart",
        "description": "The Source Code Pro font supports the `zero` feature. It causes the\nzero digit to be drawn with a slash rather than the default rendering,\nwhich in this case has a dot through the zero rather than a slash.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_zero.png)"
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 776,
        "id": "widgets.SliverAnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverAnimatedList",
        "file": "widgets.SliverAnimatedList.1.dart",
        "description": "This sample application uses a [SliverAnimatedList] to create an animated\neffect when items are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 5891,
        "id": "cupertino.RestorableRouteFuture.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RestorableRouteFuture",
        "file": "cupertino.RestorableRouteFuture.1.dart",
        "description": "This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a\nnew `MyCounter` route and to retrieve its return value."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 1097,
        "id": "material.PhysicalShape.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "PhysicalShape",
        "file": "material.PhysicalShape.1.dart",
        "description": "This example shows how to use a [PhysicalShape] on a centered [SizedBox]\nto clip it to a rounded rectangle using a [ShapeBorderClipper] and give it\nan orange color along with a shadow."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2508,
        "id": "material.InputDecoration.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.1.dart",
        "description": "This sample shows how to style a `TextField` using an `InputDecorator`. The\nTextField displays a \"send message\" icon to the left of the input area,\nwhich is surrounded by a border an all sides. It displays the `hintText`\ninside the input area to help the user understand what input is required. It\ndisplays the `helperText` and `counterText` below the input area.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 448,
        "id": "material.RotationTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RotationTransition",
        "file": "material.RotationTransition.1.dart",
        "description": "The following code implements the [RotationTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "cupertino.Focus.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "Focus",
        "file": "cupertino.Focus.2.dart",
        "description": "This example shows how to wrap another widget in a [Focus] widget to make it\nfocusable. It wraps a [Container], and changes the container's color when it\nis set as the [FocusManager.primaryFocus].\n\nIf you also want to handle mouse hover and/or keyboard actions on a widget,\nconsider using a [FocusableActionDetector], which combines several different\nwidgets to provide those capabilities."
    },
    {
        "sourcePath": "lib/src/widgets/will_pop_scope.dart",
        "sourceLine": 92,
        "id": "widgets.WillPopScope.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "WillPopScope",
        "file": "widgets.WillPopScope.2.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 350,
        "id": "cupertino.ActionListener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "ActionListener",
        "file": "cupertino.ActionListener.1.dart",
        "description": "This example shows how ActionListener handles adding and removing of\nthe [listener] in the widget lifecycle."
    },
    {
        "sourcePath": "lib/src/material/date_picker.dart",
        "sourceLine": 1029,
        "id": "material.showDateRangePicker.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "showDateRangePicker",
        "file": "material.showDateRangePicker.1.dart",
        "description": "This sample demonstrates how to create a restorable Material date range picker.\nThis is accomplished by enabling state restoration by specifying\n[MaterialApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [DateRangePickerDialog] when the button is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/media_query.dart",
        "sourceLine": 290,
        "id": "widgets.MediaQueryData.systemGestureInsets.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "MediaQueryData.systemGestureInsets",
        "file": "widgets.MediaQueryData.systemGestureInsets.1.dart",
        "description": "For apps that might be deployed on Android Q devices with full gesture\nnavigation enabled, use [systemGestureInsets] with [Padding]\nto avoid having the left and right edges of the [Slider] from appearing\nwithin the area reserved for system gesture navigation.\n\nBy default, [Slider]s expand to fill the available width. So, we pad the\nleft and right sides."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1041,
        "id": "widgets.RelativePositionedTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RelativePositionedTransition",
        "file": "widgets.RelativePositionedTransition.1.dart",
        "description": "The following code implements the [RelativePositionedTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 981,
        "id": "material.AnimatedAlign.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedAlign",
        "file": "material.AnimatedAlign.1.dart",
        "description": "The following code implements the [AnimatedAlign] widget, using a [curve] of\n[Curves.fastOutSlowIn]."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 363,
        "id": "Dart.dart:ui.FontFeature.contextualAlternates.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.contextualAlternates",
        "file": "Dart.dart:ui.FontFeature.contextualAlternates.1.dart",
        "description": "The Barriecito font supports the `calt` feature. It causes some\nletters in close proximity to other instances of themselves to\nuse different glyphs, to give the appearance of more variation\nin the glyphs, rather than having each letter always use a\nparticular glyph.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_calt.png)"
    },
    {
        "sourcePath": "lib/src/material/text_form_field.dart",
        "sourceLine": 126,
        "id": "material.TextFormField.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "TextFormField",
        "file": "material.TextFormField.2.dart",
        "description": "This example shows how to move the focus to the next field when the user\npresses the SPACE key."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 2142,
        "id": "material.Scaffold.of.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.of",
        "file": "material.Scaffold.of.2.dart",
        "description": "When the [Scaffold] is actually created in the same `build` function, the\n`context` argument to the `build` function can't be used to find the\n[Scaffold] (since it's \"above\" the widget being returned in the widget\ntree). In such cases, the following technique with a [Builder] can be used\nto provide a new scope with a [BuildContext] that is \"under\" the\n[Scaffold]:"
    },
    {
        "sourcePath": "lib/src/material/switch_list_tile.dart",
        "sourceLine": 248,
        "id": "material.SwitchListTile.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SwitchListTile",
        "file": "material.SwitchListTile.2.dart",
        "description": "![Switch list tile semantics sample](https://flutter.github.io/assets-for-api-docs/assets/material/switch_list_tile_semantics.png)\n\nHere is an example of a custom labeled radio widget, called\nLinkedLabelRadio, that includes an interactive [RichText] widget that\nhandles tap gestures."
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 1244,
        "id": "cupertino.FocusableActionDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FocusableActionDetector",
        "file": "cupertino.FocusableActionDetector.1.dart",
        "description": "This example shows how keyboard interaction can be added to a custom control\nthat changes color when hovered and focused, and can toggle a light when\nactivated, either by touch or by hitting the `X` key on the keyboard when\nthe \"And Me\" button has the keyboard focus (be sure to use TAB to move the\nfocus to the \"And Me\" button before trying it out).\n\nThis example defines its own key binding for the `X` key, but in this case,\nthere is also a default key binding for [ActivateAction] in the default key\nbindings created by [WidgetsApp] (the parent for [MaterialApp], and\n[CupertinoApp]), so the `ENTER` key will also activate the buttons."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 215,
        "id": "widgets.SingleChildScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleChildScrollView",
        "file": "widgets.SingleChildScrollView.2.dart",
        "description": "In this example, the column becomes either as big as viewport, or as big as\nthe contents, whichever is biggest."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "widgets.SliverFillRemaining.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.4.dart",
        "description": "In this sample the [SliverFillRemaining]'s child stretches to fill the\noverscroll area when [fillOverscroll] is true. This sample also features a\nbutton that is pinned to the bottom of the sliver, regardless of size or\noverscroll behavior. Try switching [fillOverscroll] to see the difference.\n\nThis sample only shows the overscroll behavior on devices that support\noverscroll."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "widgets.RawAutocomplete.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RawAutocomplete",
        "file": "widgets.RawAutocomplete.1.dart",
        "description": "This example shows how to create a very basic autocomplete widget using the\n[fieldViewBuilder] and [optionsViewBuilder] parameters."
    },
    {
        "sourcePath": "lib/src/material/bottom_navigation_bar.dart",
        "sourceLine": 246,
        "id": "material.BottomNavigationBar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "BottomNavigationBar",
        "file": "material.BottomNavigationBar.2.dart",
        "description": "This example shows a [BottomNavigationBar] as it is used within a [Scaffold]\nwidget. The [BottomNavigationBar] has four [BottomNavigationBarItem]\nwidgets, which means it defaults to [BottomNavigationBarType.shifting], and\nthe [currentIndex] is set to index 0. The selected item is amber in color.\nWith each [BottomNavigationBarItem] widget, backgroundColor property is\nalso defined, which changes the background color of [BottomNavigationBar],\nwhen that item is selected. The `_onItemTapped` function changes the\nselected item's index and displays a corresponding message in the center of\nthe [Scaffold]."
    },
    {
        "sourcePath": "lib/src/material/progress_indicator.dart",
        "sourceLine": 304,
        "id": "material.LinearProgressIndicator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "LinearProgressIndicator",
        "file": "material.LinearProgressIndicator.1.dart",
        "description": "This example shows a [LinearProgressIndicator] with a changing value."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 215,
        "id": "material.SingleChildScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SingleChildScrollView",
        "file": "material.SingleChildScrollView.2.dart",
        "description": "In this example, the column becomes either as big as viewport, or as big as\nthe contents, whichever is biggest."
    },
    {
        "sourcePath": "lib/src/material/material_state.dart",
        "sourceLine": 462,
        "id": "material.MaterialStateOutlinedBorder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "MaterialStateOutlinedBorder",
        "file": "material.MaterialStateOutlinedBorder.1.dart",
        "description": "This example defines a subclass of [RoundedRectangleBorder] and an\nimplementation of [MaterialStateOutlinedBorder], that resolves to\n[RoundedRectangleBorder] when its widget is selected."
    },
    {
        "sourcePath": "lib/src/widgets/tween_animation_builder.dart",
        "sourceLine": 116,
        "id": "cupertino.TweenAnimationBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "TweenAnimationBuilder",
        "file": "cupertino.TweenAnimationBuilder.1.dart",
        "description": "This example shows an [IconButton] that \"zooms\" in when the widget first\nbuilds (its size smoothly increases from 0 to 24) and whenever the button\nis pressed, it smoothly changes its size to the new target value of either\n48 or 24."
    },
    {
        "sourcePath": "lib/src/widgets/gesture_detector.dart",
        "sourceLine": 219,
        "id": "widgets.GestureDetector.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "GestureDetector",
        "file": "widgets.GestureDetector.2.dart",
        "description": "This example uses a [Container] that wraps a [GestureDetector] widget which\ndetects a tap.\n\nSince the [GestureDetector] does not have a child, it takes on the size of its\nparent, making the entire area of the surrounding [Container] clickable. When\ntapped, the [Container] turns yellow by setting the `_color` field. When\ntapped again, it goes back to white."
    },
    {
        "sourcePath": "lib/src/widgets/scroll_view.dart",
        "sourceLine": 618,
        "id": "cupertino.CustomScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "CustomScrollView",
        "file": "cupertino.CustomScrollView.2.dart",
        "description": "By default, if items are inserted at the \"top\" of a scrolling container like\n[ListView] or [CustomScrollView], the top item and all of the items below it\nare scrolled downwards. In some applications, it's preferable to have the\ntop of the list just grow upwards, without changing the scroll position.\nThis example demonstrates how to do that with a [CustomScrollView] with\ntwo [SliverList] children, and the [CustomScrollView.center] set to the key\nof the bottom SliverList. The top one SliverList will grow upwards, and the\nbottom SliverList will grow downwards."
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 952,
        "id": "focus_manager.FocusNode.unfocus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "focus_manager",
        "element": "FocusNode.unfocus",
        "file": "focus_manager.FocusNode.unfocus.1.dart",
        "description": "This example shows the difference between the different [UnfocusDisposition]\nvalues for [unfocus].\n\nTry setting focus on the four text fields by selecting them, and then\nselect \"UNFOCUS\" to see what happens when the current\n[FocusManager.primaryFocus] is unfocused.\n\nTry pressing the TAB key after unfocusing to see what the next widget\nchosen is."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 4581,
        "id": "widgets.NavigatorState.restorablePush.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "NavigatorState.restorablePush",
        "file": "widgets.NavigatorState.restorablePush.1.dart",
        "description": "Typical usage is as follows:"
    },
    {
        "sourcePath": "lib/src/widgets/layout_builder.dart",
        "sourceLine": 309,
        "id": "widgets.LayoutBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "LayoutBuilder",
        "file": "widgets.LayoutBuilder.1.dart",
        "description": "This example uses a [LayoutBuilder] to build a different widget depending on the available width. Resize the\nDartPad window to see [LayoutBuilder] in action!"
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1986,
        "id": "cupertino.SliverAnimatedOpacity.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverAnimatedOpacity",
        "file": "cupertino.SliverAnimatedOpacity.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] and a\n[FloatingActionButton]. Pressing the button animates the lists' opacity."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 2291,
        "id": "widgets.Navigator.restorablePushReplacement.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Navigator.restorablePushReplacement",
        "file": "widgets.Navigator.restorablePushReplacement.1.dart",
        "description": "Typical usage is as follows:"
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 496,
        "id": "widgets.FocusNode.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusNode",
        "file": "widgets.FocusNode.1.dart",
        "description": "This example shows how a FocusNode should be managed if not using the\n[Focus] or [FocusScope] widgets. See the [Focus] widget for a similar\nexample using [Focus] and [FocusScope] widgets."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1388,
        "id": "Dart.dart:ui.FontFeature.tabularFigures.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.tabularFigures",
        "file": "Dart.dart:ui.FontFeature.tabularFigures.1.dart",
        "description": "The Piazzolla font supports the `tnum` feature. It causes the\ndigits to become uniformally-sized, rather than having variable\nwidths. In this font this is especially noticeable with the\ndigit \"1\"; with tabular figures enabled, the \"1\" digit is more\nwidely spaced.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_tnum.png)"
    },
    {
        "sourcePath": "lib/src/widgets/scroll_position.dart",
        "sourceLine": 1053,
        "id": "material.ScrollMetricsNotification.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScrollMetricsNotification",
        "file": "material.ScrollMetricsNotification.1.dart",
        "description": "This sample shows how a [ScrollMetricsNotification] is dispatched when\nthe `windowSize` is changed. Press the floating action button to increase\nthe scrollable window's size."
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 122,
        "id": "widgets.GlowingOverscrollIndicator.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "GlowingOverscrollIndicator",
        "file": "widgets.GlowingOverscrollIndicator.2.dart",
        "description": "This example demonstrates how to use a [NestedScrollView] to manipulate the\nplacement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/material/dialog.dart",
        "sourceLine": 260,
        "id": "material.AlertDialog.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "AlertDialog",
        "file": "material.AlertDialog.2.dart",
        "description": "This demo shows a [TextButton] which when pressed, calls [showDialog]. When called, this method\ndisplays a Material dialog above the current contents of the app and returns\na [Future] that completes when the dialog is dismissed."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 7187,
        "id": "widgets.AbsorbPointer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AbsorbPointer",
        "file": "widgets.AbsorbPointer.1.dart",
        "description": "The following sample has an [AbsorbPointer] widget wrapping the button on\ntop of the stack, which absorbs pointer events, preventing its child button\n__and__ the button below it in the stack from receiving the pointer events."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6437,
        "id": "widgets.Listener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Listener",
        "file": "widgets.Listener.1.dart",
        "description": "This example makes a [Container] react to being touched, showing a count of\nthe number of pointer downs and ups."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5256,
        "id": "widgets.Expanded.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Expanded",
        "file": "widgets.Expanded.1.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Column] so that\nits middle child, a [Container] here, expands to fill the space.\n\n![This results in two thin blue boxes with a larger amber box in between.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_column.png)"
    },
    {
        "sourcePath": "lib/src/widgets/table.dart",
        "sourceLine": 170,
        "id": "cupertino.Table.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Table",
        "file": "cupertino.Table.1.dart",
        "description": "This sample shows a `Table` with borders, multiple types of column widths and different vertical cell alignments."
    },
    {
        "sourcePath": "lib/src/material/checkbox_list_tile.dart",
        "sourceLine": 245,
        "id": "material.CheckboxListTile.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "CheckboxListTile",
        "file": "material.CheckboxListTile.3.dart",
        "description": "![Custom checkbox list tile sample](https://flutter.github.io/assets-for-api-docs/assets/material/checkbox_list_tile_custom.png)\n\nHere is an example of a custom LabeledCheckbox widget, but you can easily\nmake your own configurable widget."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_theme.dart",
        "sourceLine": 95,
        "id": "cupertino.InheritedTheme.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "InheritedTheme",
        "file": "cupertino.InheritedTheme.1.dart",
        "description": "This example demonstrates how `InheritedTheme.capture()` can be used\nto wrap the contents of a new route with the inherited themes that\nare present when the route was built - but are not present when route\nis actually shown.\n\nIf the same code is run without `InheritedTheme.capture(), the\nnew route's Text widget will inherit the \"something must be wrong\"\nfallback text style, rather than the default text style defined in MyApp."
    },
    {
        "sourcePath": "lib/src/widgets/interactive_viewer.dart",
        "sourceLine": 76,
        "id": "material.InteractiveViewer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InteractiveViewer",
        "file": "material.InteractiveViewer.1.dart",
        "description": "This example shows a simple Container that can be panned and zoomed."
    },
    {
        "sourcePath": "lib/src/widgets/dismissible.dart",
        "sourceLine": 114,
        "id": "cupertino.Dismissible.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Dismissible",
        "file": "cupertino.Dismissible.1.dart",
        "description": "This sample shows how you can use the [Dismissible] widget to\nremove list items using swipe gestures. Swipe any of the list\ntiles to the left or right to dismiss them from the [ListView]."
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1356,
        "id": "material.OrderedTraversalPolicy.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "OrderedTraversalPolicy",
        "file": "material.OrderedTraversalPolicy.1.dart",
        "description": "This sample shows how to assign a traversal order to a widget. In the\nexample, the focus order goes from bottom right (the \"One\" button) to top\nleft (the \"Six\" button)."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "widgets.RawScrollbar.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "RawScrollbar",
        "file": "widgets.RawScrollbar.3.dart",
        "description": "When `isAlwaysShown` is true, the scrollbar thumb will remain visible without\nthe fade animation. This requires that a [ScrollController] is provided to\n`controller` for both the [RawScrollbar] and the [GridView].\nAlternatively, the [PrimaryScrollController] can be used automatically so long\nas it is attached to the singular [ScrollPosition] associated with the GridView."
    },
    {
        "sourcePath": "lib/src/material/navigation_rail.dart",
        "sourceLine": 382,
        "id": "material.NavigationRail.extendedAnimation.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "NavigationRail.extendedAnimation",
        "file": "material.NavigationRail.extendedAnimation.1.dart",
        "description": "This example shows how to use this animation to create a\n[FloatingActionButton] that animates itself between the normal and\nextended states of the [NavigationRail].\n\nAn instance of `ExtendableFab` would be created for\n[NavigationRail.leading]."
    },
    {
        "sourcePath": "lib/src/material/banner.dart",
        "sourceLine": 136,
        "id": "material.MaterialBanner.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "MaterialBanner",
        "file": "material.MaterialBanner.1.dart",
        "description": "Banners placed directly into the widget tree are static."
    },
    {
        "sourcePath": "lib/src/widgets/form.dart",
        "sourceLine": 74,
        "id": "cupertino.Form.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Form",
        "file": "cupertino.Form.1.dart",
        "description": "This example shows a [Form] with one [TextFormField] to enter an email\naddress and an [ElevatedButton] to submit the form. A [GlobalKey] is used here\nto identify the [Form] and validate input.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/widgets/form.png)"
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 298,
        "id": "material.RadioListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile",
        "file": "material.RadioListTile.1.dart",
        "description": "![RadioListTile sample](https://flutter.github.io/assets-for-api-docs/assets/material/radio_list_tile.png)\n\nThis widget shows a pair of radio buttons that control the `_character`\nfield. The field is of the type `SingingCharacter`, an enum."
    },
    {
        "sourcePath": "lib/src/widgets/page_storage.dart",
        "sourceLine": 242,
        "id": "cupertino.PageStorage.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "PageStorage",
        "file": "cupertino.PageStorage.1.dart",
        "description": "This sample shows how to explicitly use a [PageStorage] to\nstore the states of its children pages. Each page includes a scrollable\nlist, whose position is preserved when switching between the tabs thanks to\nthe help of [PageStorageKey]."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1150,
        "id": "widgets.AnimatedPositioned.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedPositioned",
        "file": "widgets.AnimatedPositioned.1.dart",
        "description": "The following example transitions an AnimatedPositioned\nbetween two states. It adjusts the `height`, `width`, and\n[Positioned] properties when tapped."
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 138,
        "id": "widgets.TextEditingController.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TextEditingController",
        "file": "widgets.TextEditingController.1.dart",
        "description": "This example creates a [TextField] with a [TextEditingController] whose\nchange listener forces the entered text to be lower case and keeps the\ncursor at the end of the input."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 562,
        "id": "Dart.dart:ui.FontFeature.fractions.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.fractions",
        "file": "Dart.dart:ui.FontFeature.fractions.1.dart",
        "description": "The Ubuntu Mono font supports the `frac` feature. It causes\ndigits around slashes to be turned into dedicated fraction\nglpyhs. This contrasts to the effect seen with\n[FontFeature.alternativeFractions].\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_frac.png)"
    },
    {
        "sourcePath": "lib/src/widgets/scroll_view.dart",
        "sourceLine": 618,
        "id": "material.CustomScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "CustomScrollView",
        "file": "material.CustomScrollView.2.dart",
        "description": "By default, if items are inserted at the \"top\" of a scrolling container like\n[ListView] or [CustomScrollView], the top item and all of the items below it\nare scrolled downwards. In some applications, it's preferable to have the\ntop of the list just grow upwards, without changing the scroll position.\nThis example demonstrates how to do that with a [CustomScrollView] with\ntwo [SliverList] children, and the [CustomScrollView.center] set to the key\nof the bottom SliverList. The top one SliverList will grow upwards, and the\nbottom SliverList will grow downwards."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1265,
        "id": "widgets.AlignTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AlignTransition",
        "file": "widgets.AlignTransition.1.dart",
        "description": "The following code implements the [AlignTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 2142,
        "id": "material.Scaffold.of.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.of",
        "file": "material.Scaffold.of.1.dart",
        "description": "Typical usage of the [Scaffold.of] function is to call it from within the\n`build` method of a child of a [Scaffold]."
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 496,
        "id": "cupertino.FocusNode.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FocusNode",
        "file": "cupertino.FocusNode.1.dart",
        "description": "This example shows how a FocusNode should be managed if not using the\n[Focus] or [FocusScope] widgets. See the [Focus] widget for a similar\nexample using [Focus] and [FocusScope] widgets."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 2781,
        "id": "cupertino.FractionallySizedBox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FractionallySizedBox",
        "file": "cupertino.FractionallySizedBox.1.dart",
        "description": "This sample shows a [FractionallySizedBox] whose one child is 50% of\nthe box's size per the width and height factor parameters, and centered\nwithin that box by the alignment parameter."
    },
    {
        "sourcePath": "lib/src/cupertino/scrollbar.dart",
        "sourceLine": 115,
        "id": "cupertino.CupertinoScrollbar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoScrollbar",
        "file": "cupertino.CupertinoScrollbar.2.dart",
        "description": "When `isAlwaysShown` is true, the scrollbar thumb will remain visible without the\nfade animation. This requires that a [ScrollController] is provided to controller,\nor that the [PrimaryScrollController] is available."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 667,
        "id": "cupertino.CharacterActivator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CharacterActivator",
        "file": "cupertino.CharacterActivator.1.dart",
        "description": "In the following example, when a key combination results in a question mark,\nthe counter is increased:"
    },
    {
        "sourcePath": "lib/src/material/flexible_space_bar.dart",
        "sourceLine": 149,
        "id": "material.FlexibleSpaceBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FlexibleSpaceBar",
        "file": "material.FlexibleSpaceBar.1.dart",
        "description": "This sample application demonstrates the different features of the\n[FlexibleSpaceBar] when used in a [SliverAppBar]. This app bar is configured\nto stretch into the overscroll space, and uses the\n[FlexibleSpaceBar.stretchModes] to apply `fadeTitle`, `blurBackground` and\n`zoomBackground`. The app bar also makes use of [CollapseMode.parallax] by\ndefault."
    },
    {
        "sourcePath": "lib/src/material/expansion_tile.dart",
        "sourceLine": 86,
        "id": "material.ExpansionTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ExpansionTile",
        "file": "material.ExpansionTile.1.dart",
        "description": "This example demonstrates different configurations of ExpansionTile."
    },
    {
        "sourcePath": "lib/src/material/reorderable_list.dart",
        "sourceLine": 285,
        "id": "material.ReorderableListView.buildDefaultDragHandles.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ReorderableListView.buildDefaultDragHandles",
        "file": "material.ReorderableListView.buildDefaultDragHandles.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 505,
        "id": "material.ScaffoldMessengerState.showMaterialBanner.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldMessengerState.showMaterialBanner",
        "file": "material.ScaffoldMessengerState.showMaterialBanner.1.dart",
        "description": "Here is an example of showing a [MaterialBanner] when the user presses a button."
    },
    {
        "sourcePath": "lib/src/widgets/preferred_size.dart",
        "sourceLine": 125,
        "id": "cupertino.PreferredSize.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "PreferredSize",
        "file": "cupertino.PreferredSize.1.dart",
        "description": "This sample shows a custom widget, similar to an [AppBar], which uses a\n[PreferredSize] widget, with its height set to 80 logical pixels.\nChanging the [PreferredSize] can be used to change the height\nof the custom app bar."
    },
    {
        "sourcePath": "lib/src/widgets/notification_listener.dart",
        "sourceLine": 103,
        "id": "material.Notification.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Notification",
        "file": "material.Notification.1.dart",
        "description": "This example shows a [NotificationListener] widget\nthat listens for [ScrollNotification] notifications. When a scroll\nevent occurs in the [NestedScrollView],\nthis widget is notified. The events could be either a\n[ScrollStartNotification]or[ScrollEndNotification]."
    },
    {
        "sourcePath": "lib/src/widgets/autofill.dart",
        "sourceLine": 150,
        "id": "material.AutofillGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AutofillGroup",
        "file": "material.AutofillGroup.1.dart",
        "description": "An example form with autofillable fields grouped into different\n`AutofillGroup`s."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 2401,
        "id": "widgets.Navigator.restorablePushAndRemoveUntil.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Navigator.restorablePushAndRemoveUntil",
        "file": "widgets.Navigator.restorablePushAndRemoveUntil.1.dart",
        "description": "Typical usage is as follows:"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6610,
        "id": "material.MouseRegion.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "MouseRegion",
        "file": "material.MouseRegion.1.dart",
        "description": "This example makes a [Container] react to being entered by a mouse\npointer, showing a count of the number of entries and exits."
    },
    {
        "sourcePath": "lib/src/widgets/tween_animation_builder.dart",
        "sourceLine": 116,
        "id": "widgets.TweenAnimationBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TweenAnimationBuilder",
        "file": "widgets.TweenAnimationBuilder.1.dart",
        "description": "This example shows an [IconButton] that \"zooms\" in when the widget first\nbuilds (its size smoothly increases from 0 to 24) and whenever the button\nis pressed, it smoothly changes its size to the new target value of either\n48 or 24."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 516,
        "id": "Dart.dart:ui.FontFeature.denominator.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.denominator",
        "file": "Dart.dart:ui.FontFeature.denominator.1.dart",
        "description": "The Piazzolla font supports the `dnom` feature. It causes\nthe digits to be rendered smaller and near the bottom of the EM box.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_dnom.png)"
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 275,
        "id": "Dart.dart:ui.FontFeature.alternative.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.alternative",
        "file": "Dart.dart:ui.FontFeature.alternative.1.dart",
        "description": "The Raleway font supports several alternate glyphs. The code\nbelow shows how specific glyphs can be selected. With `aalt` set\nto zero, the default, the normal glyphs are used. With a\nnon-zero value, Raleway substitutes small caps for lower case\nletters. With value 2, the lowercase \"a\" changes to a stemless\n\"a\", whereas the lowercase \"t\" changes to a vertical bar instead\nof having a curve. By targeting specific letters in the text\n(using [Text.rich]), the desired rendering for each glyph can be\nachieved.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_aalt.png)"
    },
    {
        "sourcePath": "lib/src/widgets/routes.dart",
        "sourceLine": 1993,
        "id": "widgets.showGeneralDialog.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "showGeneralDialog",
        "file": "widgets.showGeneralDialog.1.dart",
        "description": "This sample demonstrates how to create a restorable dialog. This is\naccomplished by enabling state restoration by specifying\n[WidgetsApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [RawDialogRoute] when the button is tapped.\n\n{@macro flutter.widgets.RestorationManager}"
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "material.NestedScrollView.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "NestedScrollView",
        "file": "material.NestedScrollView.3.dart",
        "description": "This simple example shows a [NestedScrollView] whose header contains a\nsnapping, floating [SliverAppBar]. _Without_ setting any additional flags,\ne.g [NestedScrollView.floatHeaderSlivers], the [SliverAppBar] will animate\nin and out without floating. The [SliverOverlapAbsorber] and\n[SliverOverlapInjector] maintain the proper alignment between the two\nseparate scroll views."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "widgets.Focus.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "Focus",
        "file": "widgets.Focus.2.dart",
        "description": "This example shows how to wrap another widget in a [Focus] widget to make it\nfocusable. It wraps a [Container], and changes the container's color when it\nis set as the [FocusManager.primaryFocus].\n\nIf you also want to handle mouse hover and/or keyboard actions on a widget,\nconsider using a [FocusableActionDetector], which combines several different\nwidgets to provide those capabilities."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 359,
        "id": "material.ScaffoldMessengerState.showSnackBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldMessengerState.showSnackBar",
        "file": "material.ScaffoldMessengerState.showSnackBar.1.dart",
        "description": "Here is an example of showing a [SnackBar] when the user presses a button."
    },
    {
        "sourcePath": "lib/src/widgets/restoration.dart",
        "sourceLine": 714,
        "id": "material.RestorationMixin.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RestorationMixin",
        "file": "material.RestorationMixin.1.dart",
        "description": "This example demonstrates how to make a simple counter app restorable by\nusing the [RestorationMixin] and a [RestorableInt]."
    },
    {
        "sourcePath": "lib/src/widgets/restoration.dart",
        "sourceLine": 714,
        "id": "widgets.RestorationMixin.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RestorationMixin",
        "file": "widgets.RestorationMixin.1.dart",
        "description": "This example demonstrates how to make a simple counter app restorable by\nusing the [RestorationMixin] and a [RestorableInt]."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 4726,
        "id": "widgets.NavigatorState.restorablePushReplacement.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "NavigatorState.restorablePushReplacement",
        "file": "widgets.NavigatorState.restorablePushReplacement.1.dart",
        "description": "Typical usage is as follows:"
    },
    {
        "sourcePath": "lib/src/material/bottom_navigation_bar.dart",
        "sourceLine": 246,
        "id": "material.BottomNavigationBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "BottomNavigationBar",
        "file": "material.BottomNavigationBar.1.dart",
        "description": "This example shows a [BottomNavigationBar] as it is used within a [Scaffold]\nwidget. The [BottomNavigationBar] has three [BottomNavigationBarItem]\nwidgets, which means it defaults to [BottomNavigationBarType.fixed], and\nthe [currentIndex] is set to index 0. The selected item is\namber. The `_onItemTapped` function changes the selected item's index\nand displays a corresponding message in the center of the [Scaffold]."
    },
    {
        "sourcePath": "lib/src/material/list_tile.dart",
        "sourceLine": 747,
        "id": "material.ListTile.5",
        "channel": "stable",
        "serial": "5",
        "package": "flutter",
        "library": "material",
        "element": "ListTile",
        "file": "material.ListTile.5.dart",
        "description": "Here is an example of a custom list item that resembles a YouTube-related\nvideo list item created with [Expanded] and [Container] widgets.\n\n![Custom list item a](https://flutter.github.io/assets-for-api-docs/assets/widgets/custom_list_item_a.png)"
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1356,
        "id": "cupertino.OrderedTraversalPolicy.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "OrderedTraversalPolicy",
        "file": "cupertino.OrderedTraversalPolicy.1.dart",
        "description": "This sample shows how to assign a traversal order to a widget. In the\nexample, the focus order goes from bottom right (the \"One\" button) to top\nleft (the \"Six\" button)."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 1031,
        "id": "widgets.Shortcuts.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "Shortcuts",
        "file": "widgets.Shortcuts.2.dart",
        "description": "This slightly more complicated, but more flexible, example creates a custom\n[Action] subclass to increment and decrement within a widget (a [Column])\nthat has keyboard focus. When the user presses the up and down arrow keys,\nthe counter will increment and decrement a data model using the custom\nactions.\n\nOne thing that this demonstrates is passing arguments to the [Intent] to be\ncarried to the [Action]. This shows how actions can get data either from\ntheir own construction (like the `model` in this example), or from the\nintent passed to them when invoked (like the increment `amount` in this\nexample)."
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1665,
        "id": "cupertino.FocusTraversalGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FocusTraversalGroup",
        "file": "cupertino.FocusTraversalGroup.1.dart",
        "description": "This sample shows three rows of buttons, each grouped by a\n[FocusTraversalGroup], each with different traversal order policies. Use tab\ntraversal to see the order they are traversed in.  The first row follows a\nnumerical order, the second follows a lexical order (ordered to traverse\nright to left), and the third ignores the numerical order assigned to it and\ntraverses in widget order."
    },
    {
        "sourcePath": "lib/src/material/text_button.dart",
        "sourceLine": 122,
        "id": "material.TextButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "TextButton",
        "file": "material.TextButton.1.dart",
        "description": "This sample shows how to render a disabled TextButton, an enabled TextButton\nand lastly a TextButton with gradient background."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 609,
        "id": "Dart.dart:ui.FontFeature.historicalForms.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.historicalForms",
        "file": "Dart.dart:ui.FontFeature.historicalForms.1.dart",
        "description": "The Cardo font supports the `hist` feature specifically for the\nletter \"s\": it changes occurrences of that letter for the glyph\nused by U+017F LATIN SMALL LETTER LONG S.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_historical.png)"
    },
    {
        "sourcePath": "lib/src/widgets/animated_size.dart",
        "sourceLine": 51,
        "id": "material.AnimatedSize.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedSize",
        "file": "material.AnimatedSize.1.dart",
        "description": "This example makes a [Container] react to being touched, causing the child\nof the [AnimatedSize] widget, here a [FlutterLogo], to animate."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 7187,
        "id": "cupertino.AbsorbPointer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AbsorbPointer",
        "file": "cupertino.AbsorbPointer.1.dart",
        "description": "The following sample has an [AbsorbPointer] widget wrapping the button on\ntop of the stack, which absorbs pointer events, preventing its child button\n__and__ the button below it in the stack from receiving the pointer events."
    },
    {
        "sourcePath": "lib/src/widgets/gesture_detector.dart",
        "sourceLine": 219,
        "id": "material.GestureDetector.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "GestureDetector",
        "file": "material.GestureDetector.2.dart",
        "description": "This example uses a [Container] that wraps a [GestureDetector] widget which\ndetects a tap.\n\nSince the [GestureDetector] does not have a child, it takes on the size of its\nparent, making the entire area of the surrounding [Container] clickable. When\ntapped, the [Container] turns yellow by setting the `_color` field. When\ntapped again, it goes back to white."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 1596,
        "id": "widgets.FittedBox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FittedBox",
        "file": "widgets.FittedBox.1.dart",
        "description": "In this example, the image is stretched to fill the entire [Container], which would\nnot happen normally without using FittedBox."
    },
    {
        "sourcePath": "lib/src/widgets/interactive_viewer.dart",
        "sourceLine": 76,
        "id": "cupertino.InteractiveViewer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "InteractiveViewer",
        "file": "cupertino.InteractiveViewer.1.dart",
        "description": "This example shows a simple Container that can be panned and zoomed."
    },
    {
        "sourcePath": "lib/src/widgets/interactive_viewer.dart",
        "sourceLine": 677,
        "id": "widgets.InteractiveViewer.transformationController.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InteractiveViewer.transformationController",
        "file": "widgets.InteractiveViewer.transformationController.1.dart",
        "description": "This example shows how transformationController can be used to animate the\ntransformation back to its starting position."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5256,
        "id": "widgets.Expanded.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "Expanded",
        "file": "widgets.Expanded.2.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Row] with multiple\nchildren expanded, utilizing the [flex] factor to prioritize available space.\n\n![This results in a wide amber box, followed by a thin blue box, with a medium width amber box at the end.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_row.png)"
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "widgets.NestedScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "NestedScrollView",
        "file": "widgets.NestedScrollView.1.dart",
        "description": "This example shows a [NestedScrollView] whose header is the combination of a\n[TabBar] in a [SliverAppBar] and whose body is a [TabBarView]. It uses a\n[SliverOverlapAbsorber]/[SliverOverlapInjector] pair to make the inner lists\nalign correctly, and it uses [SafeArea] to avoid any horizontal disturbances\n(e.g. the \"notch\" on iOS when the phone is horizontal). In addition,\n[PageStorageKey]s are used to remember the scroll position of each tab's\nlist."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 320,
        "id": "Dart.dart:ui.FontFeature.alternativeFractions.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.alternativeFractions",
        "file": "Dart.dart:ui.FontFeature.alternativeFractions.1.dart",
        "description": "The Ubuntu Mono font supports the `afrc` feature. It causes digits\nbefore slashes to become superscripted and digits after slashes to become\nsubscripted. This contrasts to the effect seen with [FontFeature.fractions].\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_afrc.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1041,
        "id": "material.RelativePositionedTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RelativePositionedTransition",
        "file": "material.RelativePositionedTransition.1.dart",
        "description": "The following code implements the [RelativePositionedTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/notification_listener.dart",
        "sourceLine": 103,
        "id": "cupertino.Notification.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Notification",
        "file": "cupertino.Notification.1.dart",
        "description": "This example shows a [NotificationListener] widget\nthat listens for [ScrollNotification] notifications. When a scroll\nevent occurs in the [NestedScrollView],\nthis widget is notified. The events could be either a\n[ScrollStartNotification]or[ScrollEndNotification]."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "widgets.SliverFillRemaining.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.3.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the [SliverConstraints.precedingScrollExtent] has gone\nbeyond that of the viewport's main axis."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "material.AspectRatio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AspectRatio",
        "file": "material.AspectRatio.1.dart",
        "description": "This examples shows how AspectRatio sets width when its parent's width\nconstraint is infinite. Since its parent's allowed height is a fixed value,\nthe actual width is determined via the given AspectRatio.\n\nSince the height is fixed at 100.0 in this example and the aspect ratio is\nset to 16 / 9, the width should then be 100.0 / 9 * 16."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "cupertino.RawAutocomplete.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RawAutocomplete",
        "file": "cupertino.RawAutocomplete.1.dart",
        "description": "This example shows how to create a very basic autocomplete widget using the\n[fieldViewBuilder] and [optionsViewBuilder] parameters."
    },
    {
        "sourcePath": "lib/src/material/bottom_app_bar.dart",
        "sourceLine": 202,
        "id": "material.BottomAppBar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "BottomAppBar",
        "file": "material.BottomAppBar.2.dart",
        "description": "This example shows the [BottomAppBar], which can be configured to have a notch using the\n[BottomAppBar.shape] property. This also includes an optional [FloatingActionButton], which illustrates\nthe [FloatingActionButtonLocation]s in relation to the [BottomAppBar]."
    },
    {
        "sourcePath": "lib/src/material/stepper.dart",
        "sourceLine": 282,
        "id": "material.Stepper.controlsBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Stepper.controlsBuilder",
        "file": "material.Stepper.controlsBuilder.1.dart",
        "description": "Creates a stepper control with custom buttons."
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 298,
        "id": "material.RadioListTile.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile",
        "file": "material.RadioListTile.3.dart",
        "description": "![Custom radio list tile sample](https://flutter.github.io/assets-for-api-docs/assets/material/radio_list_tile_custom.png)\n\nHere is an example of a custom LabeledRadio widget, but you can easily\nmake your own configurable widget."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2508,
        "id": "material.InputDecoration.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.4.dart",
        "description": "This sample shows how to style a `TextField` with a round border and\nadditional text before and after the input area. It displays \"Prefix\" before\nthe input area, and \"Suffix\" after the input area.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_prefix_suffix.png)"
    },
    {
        "sourcePath": "lib/src/cupertino/nav_bar.dart",
        "sourceLine": 219,
        "id": "cupertino.CupertinoNavigationBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoNavigationBar",
        "file": "cupertino.CupertinoNavigationBar.1.dart",
        "description": "This example shows a [CupertinoNavigationBar] placed in a [CupertinoPageScaffold].\nSince [backgroundColor]'s opacity is not 1.0, there is a blur effect and\ncontent slides underneath."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1109,
        "id": "Dart.dart:ui.FontFeature.scientificInferiors.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.scientificInferiors",
        "file": "Dart.dart:ui.FontFeature.scientificInferiors.1.dart",
        "description": "The Piazzolla font supports the `sinf` feature. It causes\ndigits to be smaller and subscripted.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_sinf.png)"
    },
    {
        "sourcePath": "lib/src/widgets/page_view.dart",
        "sourceLine": 607,
        "id": "material.PageView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "PageView",
        "file": "material.PageView.1.dart",
        "description": "Here is an example of [PageView]. It creates a centered [Text] in each of the three pages\nwhich scroll horizontally."
    },
    {
        "sourcePath": "lib/src/material/radio.dart",
        "sourceLine": 91,
        "id": "material.Radio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Radio",
        "file": "material.Radio.1.dart",
        "description": "Here is an example of Radio widgets wrapped in ListTiles, which is similar\nto what you could get with the RadioListTile widget.\n\nThe currently selected character is passed into `groupValue`, which is\nmaintained by the example's `State`. In this case, the first `Radio`\nwill start off selected because `_character` is initialized to\n`SingingCharacter.lafayette`.\n\nIf the second radio button is pressed, the example's state is updated\nwith `setState`, updating `_character` to `SingingCharacter.jefferson`.\nThis causes the buttons to rebuild with the updated `groupValue`, and\ntherefore the selection of the second button.\n\nRequires one of its ancestors to be a [Material] widget."
    },
    {
        "sourcePath": "lib/src/widgets/animated_switcher.dart",
        "sourceLine": 142,
        "id": "cupertino.AnimatedSwitcher.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedSwitcher",
        "file": "cupertino.AnimatedSwitcher.1.dart",
        "description": "This sample shows a counter that animates the scale of a text widget\nwhenever the value changes."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6610,
        "id": "cupertino.MouseRegion.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "MouseRegion",
        "file": "cupertino.MouseRegion.1.dart",
        "description": "This example makes a [Container] react to being entered by a mouse\npointer, showing a count of the number of entries and exits."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "rendering.SliverGridDelegateWithFixedCrossAxisCount.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "rendering",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "rendering.SliverGridDelegateWithFixedCrossAxisCount.2.dart",
        "description": "Here is an example using the [mainAxisExtent] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 150.0."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 215,
        "id": "cupertino.SingleChildScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SingleChildScrollView",
        "file": "cupertino.SingleChildScrollView.1.dart",
        "description": "In this example, the children are spaced out equally, unless there's no more\nroom, in which case they stack vertically and scroll.\n\nWhen using this technique, [Expanded] and [Flexible] are not useful, because\nin both cases the \"available space\" is infinite (since this is in a viewport).\nThe next section describes a technique for providing a maximum height constraint."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 550,
        "id": "cupertino.NestedScrollViewState.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "NestedScrollViewState",
        "file": "cupertino.NestedScrollViewState.1.dart",
        "description": "[NestedScrollViewState] can be obtained using a [GlobalKey].\nUsing the following setup, you can access the inner scroll controller\nusing `globalKey.currentState.innerController`."
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 2383,
        "id": "widgets.BuildOwner.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "BuildOwner",
        "file": "widgets.BuildOwner.1.dart",
        "description": "This example shows how to build an off-screen widget tree used to measure\nthe layout size of the rendered tree. For some use cases, the simpler\n[Offstage] widget may be a better alternative to this approach."
    },
    {
        "sourcePath": "lib/src/material/scrollbar.dart",
        "sourceLine": 94,
        "id": "material.Scrollbar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Scrollbar",
        "file": "material.Scrollbar.2.dart",
        "description": "When isAlwaysShown is true, the scrollbar thumb will remain visible without the\nfade animation. This requires that a ScrollController is provided to controller,\nor that the PrimaryScrollController is available."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5682,
        "id": "widgets.Flow.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Flow",
        "file": "widgets.Flow.1.dart",
        "description": "This example uses the [Flow] widget to create a menu that opens and closes\nas it is interacted with, shown above. The color of the button in the menu\nchanges to indicate which one has been selected."
    },
    {
        "sourcePath": "lib/src/material/snack_bar.dart",
        "sourceLine": 236,
        "id": "material.SnackBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SnackBar",
        "file": "material.SnackBar.1.dart",
        "description": "Here is an example of a [SnackBar] with an [action] button implemented using\n[SnackBarAction]."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "widgets.Focus.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "Focus",
        "file": "widgets.Focus.3.dart",
        "description": "This example shows how to focus a newly-created widget immediately after it\nis created.\n\nThe focus node will not actually be given the focus until after the frame in\nwhich it has requested focus is drawn, so it is OK to call\n[FocusNode.requestFocus] on a node which is not yet in the focus tree."
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 138,
        "id": "cupertino.TextEditingController.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "TextEditingController",
        "file": "cupertino.TextEditingController.1.dart",
        "description": "This example creates a [TextField] with a [TextEditingController] whose\nchange listener forces the entered text to be lower case and keeps the\ncursor at the end of the input."
    },
    {
        "sourcePath": "lib/src/material/list_tile.dart",
        "sourceLine": 938,
        "id": "material.ListTile.selected.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ListTile.selected",
        "file": "material.ListTile.selected.1.dart",
        "description": "Here is an example of using a [StatefulWidget] to keep track of the\nselected index, and using that to set the `selected` property on the\ncorresponding [ListTile]."
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 488,
        "id": "cupertino.StreamBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "StreamBuilder",
        "file": "cupertino.StreamBuilder.1.dart",
        "description": "This sample shows a [StreamBuilder] that listens to a Stream that emits bids\nfor an auction. Every time the StreamBuilder receives a bid from the Stream,\nit will display the price of the bid below an icon. If the Stream emits an\nerror, the error is displayed below an error icon. When the Stream finishes\nemitting bids, the final price is displayed."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 7086,
        "id": "material.IgnorePointer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "IgnorePointer",
        "file": "material.IgnorePointer.1.dart",
        "description": "The following sample has an [IgnorePointer] widget wrapping the `Column`\nwhich contains a button.\nWhen [ignoring] is set to `true` anything inside the `Column` can\nnot be tapped. When [ignoring] is set to `false` anything\ninside the `Column` can be tapped."
    },
    {
        "sourcePath": "lib/src/material/expansion_panel.dart",
        "sourceLine": 227,
        "id": "material.ExpansionPanelList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ExpansionPanelList",
        "file": "material.ExpansionPanelList.1.dart",
        "description": "Here is a simple example of how to implement ExpansionPanelList."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1244,
        "id": "Dart.dart:ui.FontFeature.subscripts.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.subscripts",
        "file": "Dart.dart:ui.FontFeature.subscripts.1.dart",
        "description": "The Piazzolla font supports the `subs` feature. It causes\ndigits to be smaller and subscripted.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_subs.png)"
    },
    {
        "sourcePath": "lib/src/material/icon_button.dart",
        "sourceLine": 129,
        "id": "material.IconButton.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "IconButton",
        "file": "material.IconButton.2.dart",
        "description": "In this sample the icon button's background color is defined with an [Ink]\nwidget whose child is an [IconButton]. The icon button's filled background\nis a light shade of blue, it's a filled circle, and it's as big as the\nbutton is.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/icon_button_background.png)"
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "cupertino.NestedScrollView.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "cupertino",
        "element": "NestedScrollView",
        "file": "cupertino.NestedScrollView.3.dart",
        "description": "This simple example shows a [NestedScrollView] whose header contains a\nsnapping, floating [SliverAppBar]. _Without_ setting any additional flags,\ne.g [NestedScrollView.floatHeaderSlivers], the [SliverAppBar] will animate\nin and out without floating. The [SliverOverlapAbsorber] and\n[SliverOverlapInjector] maintain the proper alignment between the two\nseparate scroll views."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "widgets.NestedScrollView.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "NestedScrollView",
        "file": "widgets.NestedScrollView.3.dart",
        "description": "This simple example shows a [NestedScrollView] whose header contains a\nsnapping, floating [SliverAppBar]. _Without_ setting any additional flags,\ne.g [NestedScrollView.floatHeaderSlivers], the [SliverAppBar] will animate\nin and out without floating. The [SliverOverlapAbsorber] and\n[SliverOverlapInjector] maintain the proper alignment between the two\nseparate scroll views."
    },
    {
        "sourcePath": "lib/src/widgets/drag_target.dart",
        "sourceLine": 241,
        "id": "material.Draggable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Draggable",
        "file": "material.Draggable.1.dart",
        "description": "The following example has a [Draggable] widget along with a [DragTarget]\nin a row demonstrating an incremented `acceptedData` integer value when\nyou drag the element to the target."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "cupertino.SliverGridDelegateWithFixedCrossAxisCount.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "cupertino.SliverGridDelegateWithFixedCrossAxisCount.1.dart",
        "description": "Here is an example using the [childAspectRatio] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 100.0."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5682,
        "id": "material.Flow.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Flow",
        "file": "material.Flow.1.dart",
        "description": "This example uses the [Flow] widget to create a menu that opens and closes\nas it is interacted with, shown above. The color of the button in the menu\nchanges to indicate which one has been selected."
    },
    {
        "sourcePath": "lib/src/material/navigation_rail.dart",
        "sourceLine": 102,
        "id": "material.NavigationRail.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "NavigationRail",
        "file": "material.NavigationRail.1.dart",
        "description": "This example shows a [NavigationRail] used within a Scaffold with 3\n[NavigationRailDestination]s. The main content is separated by a divider\n(although elevation on the navigation rail can be used instead). The\n`_selectedIndex` is updated by the `onDestinationSelected` callback."
    },
    {
        "sourcePath": "lib/src/material/app_bar.dart",
        "sourceLine": 214,
        "id": "material.AppBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AppBar",
        "file": "material.AppBar.1.dart",
        "description": "This sample shows an [AppBar] with two simple actions. The first action\nopens a [SnackBar], while the second action navigates to a new page."
    },
    {
        "sourcePath": "lib/src/widgets/heroes.dart",
        "sourceLine": 206,
        "id": "cupertino.Hero.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Hero",
        "file": "cupertino.Hero.1.dart",
        "description": "This sample shows a [Hero] used within a [ListTile].\n\nTapping on the Hero-wrapped rectangle triggers a hero\nanimation as a new [MaterialPageRoute] is pushed. Both the size\nand location of the rectangle animates.\n\nBoth widgets use the same [Hero.tag].\n\nThe Hero widget uses the matching tags to identify and execute this\nanimation."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1195,
        "id": "Dart.dart:ui.FontFeature.stylisticSet.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.stylisticSet",
        "file": "Dart.dart:ui.FontFeature.stylisticSet.1.dart",
        "description": "The Source Code Pro font supports the `ssXX` feature for several\nsets. In the example below, stylistic sets 2 (`ss02`), 3\n(`ss03`), and 4 (`ss04`) are selected. Stylistic set 2 changes\nthe rendering of the \"a\" character and the beta character,\nstylistic set 3 changes the lowercase \"g\", theta, and delta\ncharacters, and stylistic set 4 changes the lowercase \"i\" and\n\"l\" characters.\n\nThis font also supports character variants (see\n[FontFeature.characterVariant]).\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_ssXX_1.png)"
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "cupertino.RawScrollbar.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "cupertino",
        "element": "RawScrollbar",
        "file": "cupertino.RawScrollbar.3.dart",
        "description": "When `isAlwaysShown` is true, the scrollbar thumb will remain visible without\nthe fade animation. This requires that a [ScrollController] is provided to\n`controller` for both the [RawScrollbar] and the [GridView].\nAlternatively, the [PrimaryScrollController] can be used automatically so long\nas it is attached to the singular [ScrollPosition] associated with the GridView."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6843,
        "id": "widgets.MouseRegion.onExit.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "MouseRegion.onExit",
        "file": "widgets.MouseRegion.onExit.1.dart",
        "description": "The following example shows a blue rectangular that turns yellow when\nhovered. Since the hover state is completely contained within a widget\nthat unconditionally creates the `MouseRegion`, you can ignore the\naforementioned restriction."
    },
    {
        "sourcePath": "lib/src/material/material_state.dart",
        "sourceLine": 532,
        "id": "material.MaterialStateProperty.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "MaterialStateProperty",
        "file": "material.MaterialStateProperty.1.dart",
        "description": "This example shows how you can override the default text and icon\ncolor (the \"foreground color\") of a [TextButton] with a\n[MaterialStateProperty]. In this example, the button's text color\nwill be `Colors.blue` when the button is being pressed, hovered,\nor focused. Otherwise, the text color will be `Colors.red`."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 798,
        "id": "widgets.SliverFadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFadeTransition",
        "file": "widgets.SliverFadeTransition.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] that uses a\n[SliverFadeTransition] to fade the list in and out."
    },
    {
        "sourcePath": "lib/src/material/autocomplete.dart",
        "sourceLine": 163,
        "id": "material.Autocomplete.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Autocomplete",
        "file": "material.Autocomplete.2.dart",
        "description": "This example shows how to create an Autocomplete widget with a custom type.\nTry searching with text from the name or email field."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "cupertino.NestedScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "NestedScrollView",
        "file": "cupertino.NestedScrollView.1.dart",
        "description": "This example shows a [NestedScrollView] whose header is the combination of a\n[TabBar] in a [SliverAppBar] and whose body is a [TabBarView]. It uses a\n[SliverOverlapAbsorber]/[SliverOverlapInjector] pair to make the inner lists\nalign correctly, and it uses [SafeArea] to avoid any horizontal disturbances\n(e.g. the \"notch\" on iOS when the phone is horizontal). In addition,\n[PageStorageKey]s are used to remember the scroll position of each tab's\nlist."
    },
    {
        "sourcePath": "lib/src/widgets/animated_switcher.dart",
        "sourceLine": 142,
        "id": "material.AnimatedSwitcher.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedSwitcher",
        "file": "material.AnimatedSwitcher.1.dart",
        "description": "This sample shows a counter that animates the scale of a text widget\nwhenever the value changes."
    },
    {
        "sourcePath": "lib/src/widgets/interactive_viewer.dart",
        "sourceLine": 76,
        "id": "widgets.InteractiveViewer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InteractiveViewer",
        "file": "widgets.InteractiveViewer.1.dart",
        "description": "This example shows a simple Container that can be panned and zoomed."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5256,
        "id": "cupertino.Expanded.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Expanded",
        "file": "cupertino.Expanded.1.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Column] so that\nits middle child, a [Container] here, expands to fill the space.\n\n![This results in two thin blue boxes with a larger amber box in between.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_column.png)"
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 862,
        "id": "material.DropdownButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton",
        "file": "material.DropdownButton.1.dart",
        "description": "This sample shows a `DropdownButton` with a large arrow icon,\npurple text style, and bold purple underline, whose value is one of \"One\",\n\"Two\", \"Free\", or \"Four\".\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/dropdown_button.png)"
    },
    {
        "sourcePath": "lib/src/cupertino/page_scaffold.dart",
        "sourceLine": 58,
        "id": "cupertino.CupertinoPageScaffold.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoPageScaffold",
        "file": "cupertino.CupertinoPageScaffold.1.dart",
        "description": "This example shows a [CupertinoPageScaffold] with a [ListView] as a [child].\nThe [CupertinoButton] is connected to a callback that increments a counter.\nThe [backgroundColor] can be changed."
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 4458,
        "id": "widgets.ErrorWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "ErrorWidget",
        "file": "widgets.ErrorWidget.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1265,
        "id": "cupertino.AlignTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AlignTransition",
        "file": "cupertino.AlignTransition.1.dart",
        "description": "The following code implements the [AlignTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 4458,
        "id": "material.ErrorWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ErrorWidget",
        "file": "material.ErrorWidget.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 350,
        "id": "widgets.ScaleTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "ScaleTransition",
        "file": "widgets.ScaleTransition.1.dart",
        "description": "The following code implements the [ScaleTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/page_storage.dart",
        "sourceLine": 242,
        "id": "widgets.PageStorage.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "PageStorage",
        "file": "widgets.PageStorage.1.dart",
        "description": "This sample shows how to explicitly use a [PageStorage] to\nstore the states of its children pages. Each page includes a scrollable\nlist, whose position is preserved when switching between the tabs thanks to\nthe help of [PageStorageKey]."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 981,
        "id": "widgets.AnimatedAlign.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedAlign",
        "file": "widgets.AnimatedAlign.1.dart",
        "description": "The following code implements the [AnimatedAlign] widget, using a [curve] of\n[Curves.fastOutSlowIn]."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6610,
        "id": "widgets.MouseRegion.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "MouseRegion",
        "file": "widgets.MouseRegion.1.dart",
        "description": "This example makes a [Container] react to being entered by a mouse\npointer, showing a count of the number of entries and exits."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 350,
        "id": "material.ScaleTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaleTransition",
        "file": "material.ScaleTransition.1.dart",
        "description": "The following code implements the [ScaleTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5682,
        "id": "cupertino.Flow.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Flow",
        "file": "cupertino.Flow.1.dart",
        "description": "This example uses the [Flow] widget to create a menu that opens and closes\nas it is interacted with, shown above. The color of the button in the menu\nchanges to indicate which one has been selected."
    },
    {
        "sourcePath": "lib/src/cupertino/scrollbar.dart",
        "sourceLine": 115,
        "id": "cupertino.CupertinoScrollbar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoScrollbar",
        "file": "cupertino.CupertinoScrollbar.1.dart",
        "description": "This sample shows a [CupertinoScrollbar] that fades in and out of view as scrolling occurs.\nThe scrollbar will fade into view as the user scrolls, and fade out when scrolling stops.\nThe `thickness` of the scrollbar will animate from 6 pixels to the `thicknessWhileDragging` of 10\nwhen it is dragged by the user. The `radius` of the scrollbar thumb corners will animate from 34\nto the `radiusWhileDragging` of 0 when the scrollbar is being dragged by the user."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 864,
        "id": "cupertino.AnimatedPadding.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedPadding",
        "file": "cupertino.AnimatedPadding.1.dart",
        "description": "The following code implements the [AnimatedPadding] widget, using a [curve] of\n[Curves.easeInOut]."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "widgets.RawScrollbar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RawScrollbar",
        "file": "widgets.RawScrollbar.1.dart",
        "description": "This sample shows an app with two scrollables in the same route. Since by\ndefault, there is one [PrimaryScrollController] per route, and they both have a\nscroll direction of [Axis.vertical], they would both try to attach to that\ncontroller. The [Scrollbar] cannot support multiple positions attached to\nthe same controller, so one [ListView], and its [Scrollbar] have been\nprovided a unique [ScrollController].\n\nAlternatively, a new PrimaryScrollController could be created above one of\nthe [ListView]s."
    },
    {
        "sourcePath": "lib/src/widgets/scroll_position.dart",
        "sourceLine": 1053,
        "id": "widgets.ScrollMetricsNotification.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "ScrollMetricsNotification",
        "file": "widgets.ScrollMetricsNotification.1.dart",
        "description": "This sample shows how a [ScrollMetricsNotification] is dispatched when\nthe `windowSize` is changed. Press the floating action button to increase\nthe scrollable window's size."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "material.SliverFillRemaining.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SliverFillRemaining",
        "file": "material.SliverFillRemaining.2.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the child's extent exceeds that of the remaining extent of the\nviewport's main axis."
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 4458,
        "id": "cupertino.ErrorWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "ErrorWidget",
        "file": "cupertino.ErrorWidget.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 1461,
        "id": "material.Navigator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Navigator",
        "file": "material.Navigator.1.dart",
        "description": "The following example demonstrates how a nested [Navigator] can be used to\npresent a standalone user registration journey.\n\nEven though this example uses two [Navigator]s to demonstrate nested\n[Navigator]s, a similar result is possible using only a single [Navigator].\n\nRun this example with `flutter run --route=/signup` to start it with\nthe signup flow instead of on the home page."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "material.AspectRatio.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "AspectRatio",
        "file": "material.AspectRatio.3.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6437,
        "id": "material.Listener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Listener",
        "file": "material.Listener.1.dart",
        "description": "This example makes a [Container] react to being touched, showing a count of\nthe number of pointer downs and ups."
    },
    {
        "sourcePath": "lib/src/painting/gradient.dart",
        "sourceLine": 362,
        "id": "cupertino.LinearGradient.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "LinearGradient",
        "file": "cupertino.LinearGradient.1.dart",
        "description": "This sample draws a picture that looks like vertical window shades by having\na [Container] display a [BoxDecoration] with a [LinearGradient]."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 1031,
        "id": "cupertino.Shortcuts.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Shortcuts",
        "file": "cupertino.Shortcuts.1.dart",
        "description": "Here, we will use the [Shortcuts] and [Actions] widgets to add and subtract\nfrom a counter. When the child widget has keyboard focus, and a user presses\nthe keys that have been defined in [Shortcuts], the action that is bound\nto the appropriate [Intent] for the key is invoked.\n\nIt also shows the use of a [CallbackAction] to avoid creating a new [Action]\nsubclass."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5256,
        "id": "material.Expanded.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Expanded",
        "file": "material.Expanded.1.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Column] so that\nits middle child, a [Container] here, expands to fill the space.\n\n![This results in two thin blue boxes with a larger amber box in between.](https://flutter.github.io/assets-for-api-docs/assets/widgets/expanded_column.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 559,
        "id": "cupertino.SizeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SizeTransition",
        "file": "cupertino.SizeTransition.1.dart",
        "description": "This code defines a widget that uses [SizeTransition] to change the size\nof [FlutterLogo] continually. It is built with a [Scaffold]\nwhere the internal widget has space to change its size."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "material.AspectRatio.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "AspectRatio",
        "file": "material.AspectRatio.2.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/cupertino/refresh.dart",
        "sourceLine": 329,
        "id": "cupertino.CupertinoSliverRefreshControl.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoSliverRefreshControl",
        "file": "cupertino.CupertinoSliverRefreshControl.1.dart",
        "description": "When the user scrolls past [refreshTriggerPullDistance],\nthis sample shows the default iOS pull to refresh indicator for 1 second and\nadds a new item to the top of the list view."
    },
    {
        "sourcePath": "lib/src/widgets/table.dart",
        "sourceLine": 170,
        "id": "widgets.Table.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Table",
        "file": "widgets.Table.1.dart",
        "description": "This sample shows a `Table` with borders, multiple types of column widths and different vertical cell alignments."
    },
    {
        "sourcePath": "lib/src/painting/gradient.dart",
        "sourceLine": 362,
        "id": "rendering.LinearGradient.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "rendering",
        "element": "LinearGradient",
        "file": "rendering.LinearGradient.1.dart",
        "description": "This sample draws a picture that looks like vertical window shades by having\na [Container] display a [BoxDecoration] with a [LinearGradient]."
    },
    {
        "sourcePath": "lib/src/widgets/restoration_properties.dart",
        "sourceLine": 106,
        "id": "material.RestorableValue.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RestorableValue",
        "file": "material.RestorableValue.1.dart",
        "description": "A [StatefulWidget] that has a restorable [int] property."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2943,
        "id": "material.InputDecoration.prefixIconConstraints.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration.prefixIconConstraints",
        "file": "material.InputDecoration.prefixIconConstraints.1.dart",
        "description": "This example shows the differences between two `TextField` widgets when\n[prefixIconConstraints] is set to the default value and when one is not.\n\nNote that [isDense] must be set to true to be able to\nset the constraints smaller than 48px.\n\nIf null, [BoxConstraints] with a minimum width and height of 48px is\nused."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 448,
        "id": "widgets.RotationTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RotationTransition",
        "file": "widgets.RotationTransition.1.dart",
        "description": "The following code implements the [RotationTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 809,
        "id": "cupertino.TransitionDelegate.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "TransitionDelegate",
        "file": "cupertino.TransitionDelegate.1.dart",
        "description": "The following example demonstrates how to implement a subclass that always\nremoves or adds routes without animated transitions and puts the removed\nroutes at the top of the list."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 942,
        "id": "widgets.PositionedTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "PositionedTransition",
        "file": "widgets.PositionedTransition.1.dart",
        "description": "The following code implements the [PositionedTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "material.SliverFillRemaining.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SliverFillRemaining",
        "file": "material.SliverFillRemaining.1.dart",
        "description": "In this sample the [SliverFillRemaining] sizes its [child] to fill the\nremaining extent of the viewport in both axes. The icon is centered in the\nsliver, and would be in any computed extent for the sliver."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1265,
        "id": "material.AlignTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AlignTransition",
        "file": "material.AlignTransition.1.dart",
        "description": "The following code implements the [AlignTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "widgets.RawAutocomplete.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "RawAutocomplete",
        "file": "widgets.RawAutocomplete.2.dart",
        "description": "This example is similar to the previous example, but it uses a custom T data\ntype instead of directly using String."
    },
    {
        "sourcePath": "lib/src/material/tooltip.dart",
        "sourceLine": 90,
        "id": "material.Tooltip.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Tooltip",
        "file": "material.Tooltip.2.dart",
        "description": "This example covers most of the attributes available in Tooltip.\n`decoration` has been used to give a gradient and borderRadius to Tooltip.\n`height` has been used to set a specific height of the Tooltip.\n`preferBelow` is false, the tooltip will prefer showing above [Tooltip]'s child widget.\nHowever, it may show the tooltip below if there's not enough space\nabove the widget.\n`textStyle` has been used to set the font size of the 'message'.\n`showDuration` accepts a Duration to continue showing the message after the long\npress has been released or the mouse pointer exits the child widget.\n`waitDuration` accepts a Duration for which a mouse pointer has to hover over the child\nwidget before the tooltip is shown."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 270,
        "id": "widgets.AnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedList",
        "file": "widgets.AnimatedList.1.dart",
        "description": "This sample application uses an [AnimatedList] to create an effect when\nitems are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 623,
        "id": "material.AnimatedContainer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedContainer",
        "file": "material.AnimatedContainer.1.dart",
        "description": "The following example (depicted above) transitions an AnimatedContainer\nbetween two states. It adjusts the `height`, `width`, `color`, and\n[alignment] properties when tapped."
    },
    {
        "sourcePath": "lib/src/material/snack_bar.dart",
        "sourceLine": 236,
        "id": "material.SnackBar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SnackBar",
        "file": "material.SnackBar.2.dart",
        "description": "Here is an example of a customized [SnackBar]. It utilizes\n[behavior], [shape], [padding], [width], and [duration] to customize the\nlocation, appearance, and the duration for which the [SnackBar] is visible."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "cupertino.NestedScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "NestedScrollView",
        "file": "cupertino.NestedScrollView.2.dart",
        "description": "This simple example shows a [NestedScrollView] whose header contains a\nfloating [SliverAppBar]. By using the [floatHeaderSlivers] property, the\nfloating behavior is coordinated between the outer and inner [Scrollable]s,\nso it behaves as it would in a single scrollable."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "widgets.SliverFillRemaining.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.2.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the child's extent exceeds that of the remaining extent of the\nviewport's main axis."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 830,
        "id": "Dart.dart:ui.FontFeature.notationalForms.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.notationalForms",
        "file": "Dart.dart:ui.FontFeature.notationalForms.1.dart",
        "description": "The Gothic A1 font supports several notational variant sets via\nthe `nalt` feature.\n\nSet 1 changes the spacing of the glyphs. Set 2 parenthesizes the\nlatin letters and reduces the numerals to subscripts. Set 3\ncircles the glyphs. Set 4 parenthesizes the digits. Set 5 uses\nreverse-video circles for the digits. Set 7 superscripts the\ndigits.\n\nThe code below shows how to select set 3.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_nalt.png)"
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 488,
        "id": "material.StreamBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "StreamBuilder",
        "file": "material.StreamBuilder.1.dart",
        "description": "This sample shows a [StreamBuilder] that listens to a Stream that emits bids\nfor an auction. Every time the StreamBuilder receives a bid from the Stream,\nit will display the price of the bid below an icon. If the Stream emits an\nerror, the error is displayed below an error icon. When the Stream finishes\nemitting bids, the final price is displayed."
    },
    {
        "sourcePath": "lib/src/material/range_slider.dart",
        "sourceLine": 129,
        "id": "material.RangeSlider.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RangeSlider",
        "file": "material.RangeSlider.1.dart",
        "description": "![A range slider widget, consisting of 5 divisions and showing the default\nvalue indicator.](https://flutter.github.io/assets-for-api-docs/assets/material/range_slider.png)\n\nThis range values are in intervals of 20 because the Range Slider has 5\ndivisions, from 0 to 100. This means are values are split between 0, 20, 40,\n60, 80, and 100. The range values are initialized with 40 and 80 in this demo."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 981,
        "id": "cupertino.AnimatedAlign.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedAlign",
        "file": "cupertino.AnimatedAlign.1.dart",
        "description": "The following code implements the [AnimatedAlign] widget, using a [curve] of\n[Curves.fastOutSlowIn]."
    },
    {
        "sourcePath": "lib/src/widgets/animated_size.dart",
        "sourceLine": 51,
        "id": "cupertino.AnimatedSize.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedSize",
        "file": "cupertino.AnimatedSize.1.dart",
        "description": "This example makes a [Container] react to being touched, causing the child\nof the [AnimatedSize] widget, here a [FlutterLogo], to animate."
    },
    {
        "sourcePath": "lib/src/widgets/color_filter.dart",
        "sourceLine": 59,
        "id": "material.ColorFiltered.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ColorFiltered",
        "file": "material.ColorFiltered.1.dart",
        "description": "These two images have two [ColorFilter]s applied with different [BlendMode]s,\none with red color and [BlendMode.modulate] another with a grey color and [BlendMode.saturation]."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 215,
        "id": "widgets.SingleChildScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleChildScrollView",
        "file": "widgets.SingleChildScrollView.1.dart",
        "description": "In this example, the children are spaced out equally, unless there's no more\nroom, in which case they stack vertically and scroll.\n\nWhen using this technique, [Expanded] and [Flexible] are not useful, because\nin both cases the \"available space\" is infinite (since this is in a viewport).\nThe next section describes a technique for providing a maximum height constraint."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 239,
        "id": "material.SlideTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SlideTransition",
        "file": "material.SlideTransition.1.dart",
        "description": "The following code implements the [SlideTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 1244,
        "id": "widgets.FocusableActionDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusableActionDetector",
        "file": "widgets.FocusableActionDetector.1.dart",
        "description": "This example shows how keyboard interaction can be added to a custom control\nthat changes color when hovered and focused, and can toggle a light when\nactivated, either by touch or by hitting the `X` key on the keyboard when\nthe \"And Me\" button has the keyboard focus (be sure to use TAB to move the\nfocus to the \"And Me\" button before trying it out).\n\nThis example defines its own key binding for the `X` key, but in this case,\nthere is also a default key binding for [ActivateAction] in the default key\nbindings created by [WidgetsApp] (the parent for [MaterialApp], and\n[CupertinoApp]), so the `ENTER` key will also activate the buttons."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "cupertino.AspectRatio.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "AspectRatio",
        "file": "cupertino.AspectRatio.2.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/image.dart",
        "sourceLine": 794,
        "id": "widgets.Image.frameBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Image.frameBuilder",
        "file": "widgets.Image.frameBuilder.1.dart",
        "description": "The following sample demonstrates how to use this builder to implement an\nimage that fades in once it's been loaded.\n\nThis sample contains a limited subset of the functionality that the\n[FadeInImage] widget provides out of the box."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1487,
        "id": "cupertino.AnimatedBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedBuilder",
        "file": "cupertino.AnimatedBuilder.1.dart",
        "description": "This code defines a widget that spins a green square continually. It is\nbuilt with an [AnimatedBuilder] and makes use of the [child] feature to\navoid having to rebuild the [Container] each time."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 864,
        "id": "material.AnimatedPadding.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedPadding",
        "file": "material.AnimatedPadding.1.dart",
        "description": "The following code implements the [AnimatedPadding] widget, using a [curve] of\n[Curves.easeInOut]."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 5891,
        "id": "material.RestorableRouteFuture.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RestorableRouteFuture",
        "file": "material.RestorableRouteFuture.1.dart",
        "description": "This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a\nnew `MyCounter` route and to retrieve its return value."
    },
    {
        "sourcePath": "lib/src/material/chip.dart",
        "sourceLine": 283,
        "id": "material.DeletableChipAttributes.onDeleted.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DeletableChipAttributes.onDeleted",
        "file": "material.DeletableChipAttributes.onDeleted.1.dart",
        "description": "This sample shows how to use [onDeleted] to remove an entry when the\ndelete button is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/focus_traversal.dart",
        "sourceLine": 1356,
        "id": "widgets.OrderedTraversalPolicy.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "OrderedTraversalPolicy",
        "file": "widgets.OrderedTraversalPolicy.1.dart",
        "description": "This sample shows how to assign a traversal order to a widget. In the\nexample, the focus order goes from bottom right (the \"One\" button) to top\nleft (the \"Six\" button)."
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 1032,
        "id": "widgets.EditableText.onChanged.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "EditableText.onChanged",
        "file": "widgets.EditableText.onChanged.1.dart",
        "description": "This example shows how onChanged could be used to check the TextField's\ncurrent value each time the user inserts or deletes a character."
    },
    {
        "sourcePath": "lib/src/material/data_table.dart",
        "sourceLine": 430,
        "id": "material.DataTable.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "DataTable",
        "file": "material.DataTable.2.dart",
        "description": "This sample shows how to display a [DataTable] with alternate colors per\nrow, and a custom color for when the row is selected."
    },
    {
        "sourcePath": "lib/src/material/dialog.dart",
        "sourceLine": 1043,
        "id": "material.showDialog.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "showDialog",
        "file": "material.showDialog.1.dart",
        "description": "This sample demonstrates how to create a restorable Material dialog. This is\naccomplished by enabling state restoration by specifying\n[MaterialApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [DialogRoute] when the button is tapped.\n\n{@macro flutter.widgets.RestorationManager}"
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 138,
        "id": "material.TextEditingController.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "TextEditingController",
        "file": "material.TextEditingController.1.dart",
        "description": "This example creates a [TextField] with a [TextEditingController] whose\nchange listener forces the entered text to be lower case and keeps the\ncursor at the end of the input."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 623,
        "id": "cupertino.AnimatedContainer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedContainer",
        "file": "cupertino.AnimatedContainer.1.dart",
        "description": "The following example (depicted above) transitions an AnimatedContainer\nbetween two states. It adjusts the `height`, `width`, `color`, and\n[alignment] properties when tapped."
    },
    {
        "sourcePath": "lib/src/material/outlined_button.dart",
        "sourceLine": 75,
        "id": "material.OutlinedButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "OutlinedButton",
        "file": "material.OutlinedButton.1.dart",
        "description": "Here is an example of a basic [OutlinedButton]."
    },
    {
        "sourcePath": "lib/src/animation/curves.dart",
        "sourceLine": 512,
        "id": "material.Curve2D.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Curve2D",
        "file": "material.Curve2D.1.dart",
        "description": "This example shows how to use a [Curve2D] to modify the position of a widget\nso that it can follow an arbitrary path."
    },
    {
        "sourcePath": "lib/src/cupertino/text_form_field_row.dart",
        "sourceLine": 112,
        "id": "cupertino.CupertinoTextFormFieldRow.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "CupertinoTextFormFieldRow",
        "file": "cupertino.CupertinoTextFormFieldRow.2.dart",
        "description": "This example shows how to move the focus to the next field when the user\npresses the SPACE key."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "material.RawAutocomplete.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "RawAutocomplete",
        "file": "material.RawAutocomplete.2.dart",
        "description": "This example is similar to the previous example, but it uses a custom T data\ntype instead of directly using String."
    },
    {
        "sourcePath": "lib/src/widgets/restoration_properties.dart",
        "sourceLine": 106,
        "id": "widgets.RestorableValue.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RestorableValue",
        "file": "widgets.RestorableValue.1.dart",
        "description": "A [StatefulWidget] that has a restorable [int] property."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1879,
        "id": "material.Scaffold.endDrawer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.endDrawer",
        "file": "material.Scaffold.endDrawer.1.dart",
        "description": "To disable the drawer edge swipe, set the\n[Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use\n[ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to\nclose it."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "material.Focus.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Focus",
        "file": "material.Focus.2.dart",
        "description": "This example shows how to wrap another widget in a [Focus] widget to make it\nfocusable. It wraps a [Container], and changes the container's color when it\nis set as the [FocusManager.primaryFocus].\n\nIf you also want to handle mouse hover and/or keyboard actions on a widget,\nconsider using a [FocusableActionDetector], which combines several different\nwidgets to provide those capabilities."
    },
    {
        "sourcePath": "lib/src/material/floating_action_button.dart",
        "sourceLine": 131,
        "id": "material.FloatingActionButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FloatingActionButton",
        "file": "material.FloatingActionButton.1.dart",
        "description": "This example shows how to display a [FloatingActionButton] in a\n[Scaffold], with a pink [backgroundColor] and a thumbs up [Icon].\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/floating_action_button.png)"
    },
    {
        "sourcePath": "lib/src/material/about.dart",
        "sourceLine": 116,
        "id": "material.AboutListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AboutListTile",
        "file": "material.AboutListTile.1.dart",
        "description": "This sample shows two ways to open [AboutDialog]. The first one\nuses an [AboutListTile], and the second uses the [showAboutDialog] function."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "widgets.SliverGridDelegateWithFixedCrossAxisCount.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "widgets.SliverGridDelegateWithFixedCrossAxisCount.1.dart",
        "description": "Here is an example using the [childAspectRatio] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 100.0."
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 1026,
        "id": "material.DropdownButton.selectedItemBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton.selectedItemBuilder",
        "file": "material.DropdownButton.selectedItemBuilder.1.dart",
        "description": "This sample shows a `DropdownButton` with a button with [Text] that\ncorresponds to but is unique from [DropdownMenuItem]."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 780,
        "id": "Dart.dart:ui.FontFeature.localeAware.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.localeAware",
        "file": "Dart.dart:ui.FontFeature.localeAware.1.dart",
        "description": "The Noto Sans CJK font supports the `locl` feature for CJK characters.\nIn this example, the `localeAware` feature is not explicitly used, as it is\nenabled by default. This example instead shows how to set the locale,\nthus demonstrating how Noto Sans adapts the glyph shapes to the locale.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_locl.png)"
    },
    {
        "sourcePath": "lib/src/widgets/scroll_position.dart",
        "sourceLine": 1053,
        "id": "cupertino.ScrollMetricsNotification.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "ScrollMetricsNotification",
        "file": "cupertino.ScrollMetricsNotification.1.dart",
        "description": "This sample shows how a [ScrollMetricsNotification] is dispatched when\nthe `windowSize` is changed. Press the floating action button to increase\nthe scrollable window's size."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 4835,
        "id": "widgets.NavigatorState.restorablePushAndRemoveUntil.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "NavigatorState.restorablePushAndRemoveUntil",
        "file": "widgets.NavigatorState.restorablePushAndRemoveUntil.1.dart",
        "description": "Typical usage is as follows:"
    },
    {
        "sourcePath": "lib/src/material/tab_controller.dart",
        "sourceLine": 139,
        "id": "material.TabController.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "TabController",
        "file": "material.TabController.2.dart",
        "description": "This example shows how to listen to page updates in [TabBar] and [TabBarView]\nwhen using [DefaultTabController]."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_theme.dart",
        "sourceLine": 95,
        "id": "widgets.InheritedTheme.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InheritedTheme",
        "file": "widgets.InheritedTheme.1.dart",
        "description": "This example demonstrates how `InheritedTheme.capture()` can be used\nto wrap the contents of a new route with the inherited themes that\nare present when the route was built - but are not present when route\nis actually shown.\n\nIf the same code is run without `InheritedTheme.capture(), the\nnew route's Text widget will inherit the \"something must be wrong\"\nfallback text style, rather than the default text style defined in MyApp."
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 701,
        "id": "material.Actions.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Actions",
        "file": "material.Actions.1.dart",
        "description": "This example creates a custom [Action] subclass `ModifyAction` for modifying\na model, and another, `SaveAction` for saving it.\n\nThis example demonstrates passing arguments to the [Intent] to be carried to\nthe [Action]. Actions can get data either from their own construction (like\nthe `model` in this example), or from the intent passed to them when invoked\n(like the increment `amount` in this example).\n\nThis example also demonstrates how to use Intents to limit a widget's\ndependencies on its surroundings. The `SaveButton` widget defined in this\nexample can invoke actions defined in its ancestor widgets, which can be\ncustomized to match the part of the widget tree that it is in. It doesn't\nneed to know about the `SaveAction` class, only the `SaveIntent`, and it\nonly needs to know about a value notifier, not the entire model."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "widgets.SliverGridDelegateWithFixedCrossAxisCount.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "widgets.SliverGridDelegateWithFixedCrossAxisCount.2.dart",
        "description": "Here is an example using the [mainAxisExtent] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 150.0."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "material.SliverGridDelegateWithFixedCrossAxisCount.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "material.SliverGridDelegateWithFixedCrossAxisCount.1.dart",
        "description": "Here is an example using the [childAspectRatio] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 100.0."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 635,
        "id": "widgets.RawAutocomplete.focusNode.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RawAutocomplete.focusNode",
        "file": "widgets.RawAutocomplete.focusNode.1.dart",
        "description": "This examples shows how to create an autocomplete widget with the text\nfield in the AppBar and the results in the main body of the app."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "cupertino.RawAutocomplete.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "cupertino",
        "element": "RawAutocomplete",
        "file": "cupertino.RawAutocomplete.3.dart",
        "description": "This example shows the use of RawAutocomplete in a form."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1361,
        "id": "material.DefaultTextStyleTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DefaultTextStyleTransition",
        "file": "material.DefaultTextStyleTransition.1.dart",
        "description": "The following code implements the [DefaultTextStyleTransition] that shows\na transition between thick blue font and thin red font."
    },
    {
        "sourcePath": "lib/src/widgets/gesture_detector.dart",
        "sourceLine": 219,
        "id": "widgets.GestureDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "GestureDetector",
        "file": "widgets.GestureDetector.1.dart",
        "description": "This example contains a black light bulb wrapped in a [GestureDetector]. It\nturns the light bulb yellow when the \"TURN LIGHT ON\" button is tapped by\nsetting the `_lights` field, and off again when \"TURN LIGHT OFF\" is tapped."
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 298,
        "id": "material.RadioListTile.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile",
        "file": "material.RadioListTile.2.dart",
        "description": "![Radio list tile semantics sample](https://flutter.github.io/assets-for-api-docs/assets/material/radio_list_tile_semantics.png)\n\nHere is an example of a custom labeled radio widget, called\nLinkedLabelRadio, that includes an interactive [RichText] widget that\nhandles tap gestures."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1735,
        "id": "material.AnimatedSlide.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedSlide",
        "file": "material.AnimatedSlide.1.dart",
        "description": "This code defines a widget that uses [AnimatedSlide] to translate a [FlutterLogo]\nup or down by the amount of it's height with each press of the corresponding button."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2508,
        "id": "material.InputDecoration.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration",
        "file": "material.InputDecoration.3.dart",
        "description": "This sample shows how to create a `TextField` with hint text, a red border\non all sides, and an error message. To display a red border and error\nmessage, provide `errorText` to the `InputDecoration` constructor.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_error.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 559,
        "id": "widgets.SizeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SizeTransition",
        "file": "widgets.SizeTransition.1.dart",
        "description": "This code defines a widget that uses [SizeTransition] to change the size\nof [FlutterLogo] continually. It is built with a [Scaffold]\nwhere the internal widget has space to change its size."
    },
    {
        "sourcePath": "lib/src/widgets/heroes.dart",
        "sourceLine": 206,
        "id": "material.Hero.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Hero",
        "file": "material.Hero.1.dart",
        "description": "This sample shows a [Hero] used within a [ListTile].\n\nTapping on the Hero-wrapped rectangle triggers a hero\nanimation as a new [MaterialPageRoute] is pushed. Both the size\nand location of the rectangle animates.\n\nBoth widgets use the same [Hero.tag].\n\nThe Hero widget uses the matching tags to identify and execute this\nanimation."
    },
    {
        "sourcePath": "lib/src/material/checkbox.dart",
        "sourceLine": 75,
        "id": "material.Checkbox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Checkbox",
        "file": "material.Checkbox.1.dart",
        "description": "This example shows how you can override the default theme of\nof a [Checkbox] with a [MaterialStateProperty].\nIn this example, the checkbox's color will be `Colors.blue` when the [Checkbox]\nis being pressed, hovered, or focused. Otherwise, the checkbox's color will\nbe `Colors.red`."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 1031,
        "id": "cupertino.Shortcuts.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "Shortcuts",
        "file": "cupertino.Shortcuts.2.dart",
        "description": "This slightly more complicated, but more flexible, example creates a custom\n[Action] subclass to increment and decrement within a widget (a [Column])\nthat has keyboard focus. When the user presses the up and down arrow keys,\nthe counter will increment and decrement a data model using the custom\nactions.\n\nOne thing that this demonstrates is passing arguments to the [Intent] to be\ncarried to the [Action]. This shows how actions can get data either from\ntheir own construction (like the `model` in this example), or from the\nintent passed to them when invoked (like the increment `amount` in this\nexample)."
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 496,
        "id": "material.FocusNode.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FocusNode",
        "file": "material.FocusNode.1.dart",
        "description": "This example shows how a FocusNode should be managed if not using the\n[Focus] or [FocusScope] widgets. See the [Focus] widget for a similar\nexample using [Focus] and [FocusScope] widgets."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 5891,
        "id": "widgets.RestorableRouteFuture.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "RestorableRouteFuture",
        "file": "widgets.RestorableRouteFuture.1.dart",
        "description": "This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a\nnew `MyCounter` route and to retrieve its return value."
    },
    {
        "sourcePath": "lib/src/material/card.dart",
        "sourceLine": 99,
        "id": "material.Card.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Card",
        "file": "material.Card.1.dart",
        "description": "This sample shows creation of a [Card] widget that shows album information\nand two actions."
    },
    {
        "sourcePath": "lib/src/widgets/gesture_detector.dart",
        "sourceLine": 219,
        "id": "material.GestureDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "GestureDetector",
        "file": "material.GestureDetector.1.dart",
        "description": "This example contains a black light bulb wrapped in a [GestureDetector]. It\nturns the light bulb yellow when the \"TURN LIGHT ON\" button is tapped by\nsetting the `_lights` field, and off again when \"TURN LIGHT OFF\" is tapped."
    },
    {
        "sourcePath": "lib/src/material/elevated_button.dart",
        "sourceLine": 87,
        "id": "material.ElevatedButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ElevatedButton",
        "file": "material.ElevatedButton.1.dart",
        "description": "This sample produces an enabled and a disabled ElevatedButton."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 223,
        "id": "material.ScaffoldMessenger.of.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldMessenger.of",
        "file": "material.ScaffoldMessenger.of.2.dart",
        "description": "Sometimes [SnackBar]s are produced by code that doesn't have ready access\nto a valid [BuildContext]. One such example of this is when you show a\nSnackBar from a method outside of the `build` function. In these\ncases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This\nexample shows a key being used to obtain the [ScaffoldMessengerState]\nprovided by the [MaterialApp]."
    },
    {
        "sourcePath": "lib/src/widgets/dismissible.dart",
        "sourceLine": 114,
        "id": "widgets.Dismissible.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Dismissible",
        "file": "widgets.Dismissible.1.dart",
        "description": "This sample shows how you can use the [Dismissible] widget to\nremove list items using swipe gestures. Swipe any of the list\ntiles to the left or right to dismiss them from the [ListView]."
    },
    {
        "sourcePath": "lib/src/widgets/will_pop_scope.dart",
        "sourceLine": 92,
        "id": "cupertino.WillPopScope.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "WillPopScope",
        "file": "cupertino.WillPopScope.2.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/material/banner.dart",
        "sourceLine": 136,
        "id": "material.MaterialBanner.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "MaterialBanner",
        "file": "material.MaterialBanner.2.dart",
        "description": "MaterialBanner's can also be presented through a [ScaffoldMessenger].\nHere is an example where ScaffoldMessengerState.showMaterialBanner() is used to show the MaterialBanner."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1735,
        "id": "widgets.AnimatedSlide.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedSlide",
        "file": "widgets.AnimatedSlide.1.dart",
        "description": "This code defines a widget that uses [AnimatedSlide] to translate a [FlutterLogo]\nup or down by the amount of it's height with each press of the corresponding button."
    },
    {
        "sourcePath": "lib/src/widgets/routes.dart",
        "sourceLine": 1993,
        "id": "cupertino.showGeneralDialog.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "showGeneralDialog",
        "file": "cupertino.showGeneralDialog.1.dart",
        "description": "This sample demonstrates how to create a restorable dialog. This is\naccomplished by enabling state restoration by specifying\n[WidgetsApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [RawDialogRoute] when the button is tapped.\n\n{@macro flutter.widgets.RestorationManager}"
    },
    {
        "sourcePath": "lib/src/widgets/color_filter.dart",
        "sourceLine": 59,
        "id": "cupertino.ColorFiltered.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "ColorFiltered",
        "file": "cupertino.ColorFiltered.1.dart",
        "description": "These two images have two [ColorFilter]s applied with different [BlendMode]s,\none with red color and [BlendMode.modulate] another with a grey color and [BlendMode.saturation]."
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 1086,
        "id": "material.DropdownButton.style.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton.style",
        "file": "material.DropdownButton.style.1.dart",
        "description": "This sample shows a `DropdownButton` with a dropdown button text style\nthat is different than its menu items."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 215,
        "id": "material.SingleChildScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SingleChildScrollView",
        "file": "material.SingleChildScrollView.1.dart",
        "description": "In this example, the children are spaced out equally, unless there's no more\nroom, in which case they stack vertically and scroll.\n\nWhen using this technique, [Expanded] and [Flexible] are not useful, because\nin both cases the \"available space\" is infinite (since this is in a viewport).\nThe next section describes a technique for providing a maximum height constraint."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 223,
        "id": "material.ScaffoldMessenger.of.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldMessenger.of",
        "file": "material.ScaffoldMessenger.of.1.dart",
        "description": "Typical usage of the [ScaffoldMessenger.of] function is to call it in\nresponse to a user gesture or an application state change."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1487,
        "id": "material.AnimatedBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AnimatedBuilder",
        "file": "material.AnimatedBuilder.1.dart",
        "description": "This code defines a widget that spins a green square continually. It is\nbuilt with an [AnimatedBuilder] and makes use of the [child] feature to\navoid having to rebuild the [Container] each time."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "widgets.RawScrollbar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "RawScrollbar",
        "file": "widgets.RawScrollbar.2.dart",
        "description": "This sample shows a [RawScrollbar] that executes a fade animation as\nscrolling occurs. The RawScrollbar will fade into view as the user scrolls,\nand fade out when scrolling stops. The [GridView] uses the\n[PrimaryScrollController] since it has an [Axis.vertical] scroll direction\nand has not been provided a [ScrollController]."
    },
    {
        "sourcePath": "lib/src/material/app_bar.dart",
        "sourceLine": 214,
        "id": "material.AppBar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "AppBar",
        "file": "material.AppBar.2.dart",
        "description": ""
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 675,
        "id": "Dart.dart:ui.FontFeature.historicalLigatures.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.historicalLigatures",
        "file": "Dart.dart:ui.FontFeature.historicalLigatures.1.dart",
        "description": "The Cardo font supports the `hlig` feature. It has legacy\nligatures for \"VI\" and \"NT\", and various ligatures involving the\n\"long s\". In the example below, both historical forms (`hist 1`)\nand historical ligatures (`hlig 1`) are enabled, so, for\ninstance, \"fish\" becomes \"fiſh\" which is then rendered using a\nligature for the last two characters.\n\nSimilarly, the word \"business\" is turned into \"buſineſſ\" by\n`hist`, and the `ſi` and `ſſ` pairs are ligated by `hlig`.\nObserve in particular the position of the dot of the \"i\" in\n\"business\" in the various combinations of these features.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_historical.png)"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "cupertino.SliverFillRemaining.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverFillRemaining",
        "file": "cupertino.SliverFillRemaining.2.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the child's extent exceeds that of the remaining extent of the\nviewport's main axis."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "cupertino.RawScrollbar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RawScrollbar",
        "file": "cupertino.RawScrollbar.1.dart",
        "description": "This sample shows an app with two scrollables in the same route. Since by\ndefault, there is one [PrimaryScrollController] per route, and they both have a\nscroll direction of [Axis.vertical], they would both try to attach to that\ncontroller. The [Scrollbar] cannot support multiple positions attached to\nthe same controller, so one [ListView], and its [Scrollbar] have been\nprovided a unique [ScrollController].\n\nAlternatively, a new PrimaryScrollController could be created above one of\nthe [ListView]s."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "material.Focus.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "Focus",
        "file": "material.Focus.3.dart",
        "description": "This example shows how to focus a newly-created widget immediately after it\nis created.\n\nThe focus node will not actually be given the focus until after the frame in\nwhich it has requested focus is drawn, so it is OK to call\n[FocusNode.requestFocus] on a node which is not yet in the focus tree."
    },
    {
        "sourcePath": "lib/src/widgets/preferred_size.dart",
        "sourceLine": 125,
        "id": "widgets.PreferredSize.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "PreferredSize",
        "file": "widgets.PreferredSize.1.dart",
        "description": "This sample shows a custom widget, similar to an [AppBar], which uses a\n[PreferredSize] widget, with its height set to 80 logical pixels.\nChanging the [PreferredSize] can be used to change the height\nof the custom app bar."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1735,
        "id": "cupertino.AnimatedSlide.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedSlide",
        "file": "cupertino.AnimatedSlide.1.dart",
        "description": "This code defines a widget that uses [AnimatedSlide] to translate a [FlutterLogo]\nup or down by the amount of it's height with each press of the corresponding button."
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 122,
        "id": "cupertino.GlowingOverscrollIndicator.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "GlowingOverscrollIndicator",
        "file": "cupertino.GlowingOverscrollIndicator.2.dart",
        "description": "This example demonstrates how to use a [NestedScrollView] to manipulate the\nplacement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "cupertino.Focus.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "cupertino",
        "element": "Focus",
        "file": "cupertino.Focus.3.dart",
        "description": "This example shows how to focus a newly-created widget immediately after it\nis created.\n\nThe focus node will not actually be given the focus until after the frame in\nwhich it has requested focus is drawn, so it is OK to call\n[FocusNode.requestFocus] on a node which is not yet in the focus tree."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 924,
        "id": "widgets.FocusScope.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusScope",
        "file": "widgets.FocusScope.1.dart",
        "description": "This example demonstrates using a [FocusScope] to restrict focus to a particular\nportion of the app. In this case, restricting focus to the visible part of a\nStack."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 667,
        "id": "material.CharacterActivator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "CharacterActivator",
        "file": "material.CharacterActivator.1.dart",
        "description": "In the following example, when a key combination results in a question mark,\nthe counter is increased:"
    },
    {
        "sourcePath": "lib/src/widgets/focus_manager.dart",
        "sourceLine": 952,
        "id": "widgets.FocusNode.unfocus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FocusNode.unfocus",
        "file": "widgets.FocusNode.unfocus.1.dart",
        "description": "This example shows the difference between the different [UnfocusDisposition]\nvalues for [unfocus].\n\nTry setting focus on the four text fields by selecting them, and then\nselect \"UNFOCUS\" to see what happens when the current\n[FocusManager.primaryFocus] is unfocused.\n\nTry pressing the TAB key after unfocusing to see what the next widget\nchosen is."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3179,
        "id": "cupertino.Offstage.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Offstage",
        "file": "cupertino.Offstage.1.dart",
        "description": "This example shows a [FlutterLogo] widget when the `_offstage` member field\nis false, and hides it without any room in the parent when it is true. When\noffstage, this app displays a button to get the logo size, which will be\ndisplayed in a [SnackBar]."
    },
    {
        "sourcePath": "lib/src/material/switch_list_tile.dart",
        "sourceLine": 248,
        "id": "material.SwitchListTile.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SwitchListTile",
        "file": "material.SwitchListTile.1.dart",
        "description": "![SwitchListTile sample](https://flutter.github.io/assets-for-api-docs/assets/material/switch_list_tile.png)\n\nThis widget shows a switch that, when toggled, changes the state of a [bool]\nmember field called `_lights`."
    },
    {
        "sourcePath": "lib/src/widgets/layout_builder.dart",
        "sourceLine": 309,
        "id": "cupertino.LayoutBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "LayoutBuilder",
        "file": "cupertino.LayoutBuilder.1.dart",
        "description": "This example uses a [LayoutBuilder] to build a different widget depending on the available width. Resize the\nDartPad window to see [LayoutBuilder] in action!"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "cupertino.AspectRatio.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AspectRatio",
        "file": "cupertino.AspectRatio.1.dart",
        "description": "This examples shows how AspectRatio sets width when its parent's width\nconstraint is infinite. Since its parent's allowed height is a fixed value,\nthe actual width is determined via the given AspectRatio.\n\nSince the height is fixed at 100.0 in this example and the aspect ratio is\nset to 16 / 9, the width should then be 100.0 / 9 * 16."
    },
    {
        "sourcePath": "lib/src/material/scrollbar.dart",
        "sourceLine": 94,
        "id": "material.Scrollbar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scrollbar",
        "file": "material.Scrollbar.1.dart",
        "description": "This sample shows a [Scrollbar] that executes a fade animation as scrolling occurs.\nThe Scrollbar will fade into view as the user scrolls, and fade out when scrolling stops."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "material.RawAutocomplete.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RawAutocomplete",
        "file": "material.RawAutocomplete.1.dart",
        "description": "This example shows how to create a very basic autocomplete widget using the\n[fieldViewBuilder] and [optionsViewBuilder] parameters."
    },
    {
        "sourcePath": "lib/src/painting/gradient.dart",
        "sourceLine": 362,
        "id": "widgets.LinearGradient.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "LinearGradient",
        "file": "widgets.LinearGradient.1.dart",
        "description": "This sample draws a picture that looks like vertical window shades by having\na [Container] display a [BoxDecoration] with a [LinearGradient]."
    },
    {
        "sourcePath": "lib/src/widgets/drag_target.dart",
        "sourceLine": 241,
        "id": "cupertino.Draggable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Draggable",
        "file": "cupertino.Draggable.1.dart",
        "description": "The following example has a [Draggable] widget along with a [DragTarget]\nin a row demonstrating an incremented `acceptedData` integer value when\nyou drag the element to the target."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 2191,
        "id": "widgets.Navigator.restorablePush.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Navigator.restorablePush",
        "file": "widgets.Navigator.restorablePush.1.dart",
        "description": "Typical usage is as follows:"
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 2693,
        "id": "material.InputDecoration.label.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration.label",
        "file": "material.InputDecoration.label.1.dart",
        "description": "This example shows a `TextField` with a [Text.rich] widget as the [label].\nThe widget contains multiple [Text] widgets with different [TextStyle]'s."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "cupertino.SliverFillRemaining.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverFillRemaining",
        "file": "cupertino.SliverFillRemaining.3.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the [SliverConstraints.precedingScrollExtent] has gone\nbeyond that of the viewport's main axis."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 1031,
        "id": "material.Shortcuts.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Shortcuts",
        "file": "material.Shortcuts.1.dart",
        "description": "Here, we will use the [Shortcuts] and [Actions] widgets to add and subtract\nfrom a counter. When the child widget has keyboard focus, and a user presses\nthe keys that have been defined in [Shortcuts], the action that is bound\nto the appropriate [Intent] for the key is invoked.\n\nIt also shows the use of a [CallbackAction] to avoid creating a new [Action]\nsubclass."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1986,
        "id": "widgets.SliverAnimatedOpacity.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverAnimatedOpacity",
        "file": "widgets.SliverAnimatedOpacity.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] and a\n[FloatingActionButton]. Pressing the button animates the lists' opacity."
    },
    {
        "sourcePath": "lib/src/material/reorderable_list.dart",
        "sourceLine": 68,
        "id": "material.ReorderableListView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ReorderableListView",
        "file": "material.ReorderableListView.1.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1816,
        "id": "material.Scaffold.drawer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.drawer",
        "file": "material.Scaffold.drawer.1.dart",
        "description": "To disable the drawer edge swipe, set the\n[Scaffold.drawerEnableOpenDragGesture] to false. Then, use\n[ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close\nit."
    },
    {
        "sourcePath": "lib/src/material/text_field.dart",
        "sourceLine": 285,
        "id": "material.TextField.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "TextField",
        "file": "material.TextField.2.dart",
        "description": "This sample shows how to get a value from a TextField via the [onSubmitted]\ncallback."
    },
    {
        "sourcePath": "lib/src/material/radio.dart",
        "sourceLine": 247,
        "id": "material.Radio.toggleable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Radio.toggleable",
        "file": "material.Radio.toggleable.1.dart",
        "description": "This example shows how to enable deselecting a radio button by setting the\n[toggleable] attribute."
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 686,
        "id": "material.FutureBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FutureBuilder",
        "file": "material.FutureBuilder.1.dart",
        "description": "This sample shows a [FutureBuilder] that displays a loading spinner while it\nloads data. It displays a success icon and text if the [Future] completes\nwith a result, or an error icon and text if the [Future] completes with an\nerror. Assume the `_calculation` field is set by pressing a button elsewhere\nin the UI."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 6437,
        "id": "cupertino.Listener.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Listener",
        "file": "cupertino.Listener.1.dart",
        "description": "This example makes a [Container] react to being touched, showing a count of\nthe number of pointer downs and ups."
    },
    {
        "sourcePath": "lib/src/material/radio_list_tile.dart",
        "sourceLine": 431,
        "id": "material.RadioListTile.toggleable.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RadioListTile.toggleable",
        "file": "material.RadioListTile.toggleable.1.dart",
        "description": "This example shows how to enable deselecting a radio button by setting the\n[toggleable] attribute."
    },
    {
        "sourcePath": "lib/src/widgets/interactive_viewer.dart",
        "sourceLine": 461,
        "id": "widgets.InteractiveViewer.constrained.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InteractiveViewer.constrained",
        "file": "widgets.InteractiveViewer.constrained.1.dart",
        "description": "This example shows how to create a pannable table. Because the table is\nlarger than the entire screen, setting `constrained` to false is necessary\nto allow it to be drawn to its full size. The parts of the table that\nexceed the screen size can then be panned into view."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "cupertino.SliverGridDelegateWithFixedCrossAxisCount.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "cupertino.SliverGridDelegateWithFixedCrossAxisCount.2.dart",
        "description": "Here is an example using the [mainAxisExtent] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 150.0."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_theme.dart",
        "sourceLine": 95,
        "id": "material.InheritedTheme.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InheritedTheme",
        "file": "material.InheritedTheme.1.dart",
        "description": "This example demonstrates how `InheritedTheme.capture()` can be used\nto wrap the contents of a new route with the inherited themes that\nare present when the route was built - but are not present when route\nis actually shown.\n\nIf the same code is run without `InheritedTheme.capture(), the\nnew route's Text widget will inherit the \"something must be wrong\"\nfallback text style, rather than the default text style defined in MyApp."
    },
    {
        "sourcePath": "lib/src/widgets/async.dart",
        "sourceLine": 686,
        "id": "cupertino.FutureBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FutureBuilder",
        "file": "cupertino.FutureBuilder.1.dart",
        "description": "This sample shows a [FutureBuilder] that displays a loading spinner while it\nloads data. It displays a success icon and text if the [Future] completes\nwith a result, or an error icon and text if the [Future] completes with an\nerror. Assume the `_calculation` field is set by pressing a button elsewhere\nin the UI."
    },
    {
        "sourcePath": "lib/src/gestures/pointer_signal_resolver.dart",
        "sourceLine": 166,
        "id": "gestures.PointerSignalResolver.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "gestures",
        "element": "PointerSignalResolver",
        "file": "gestures.PointerSignalResolver.1.dart",
        "description": "Here is an example that demonstrates the effect of not using the resolver\nversus using it.\n\nWhen this example is set to _not_ use the resolver, then triggering the\nmouse wheel over the outer box will cause only the outer box to change\ncolor, but triggering the mouse wheel over the inner box will cause _both_\nthe outer and the inner boxes to change color (because they're both\nreceiving the event).\n\nWhen this example is set to _use_ the resolver, then only the box located\ndirectly under the cursor will change color when the mouse wheel is\ntriggered."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 7086,
        "id": "cupertino.IgnorePointer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "IgnorePointer",
        "file": "cupertino.IgnorePointer.1.dart",
        "description": "The following sample has an [IgnorePointer] widget wrapping the `Column`\nwhich contains a button.\nWhen [ignoring] is set to `true` anything inside the `Column` can\nnot be tapped. When [ignoring] is set to `false` anything\ninside the `Column` can be tapped."
    },
    {
        "sourcePath": "lib/src/animation/curves.dart",
        "sourceLine": 512,
        "id": "animation.Curve2D.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "animation",
        "element": "Curve2D",
        "file": "animation.Curve2D.1.dart",
        "description": "This example shows how to use a [Curve2D] to modify the position of a widget\nso that it can follow an arbitrary path."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 869,
        "id": "Dart.dart:ui.FontFeature.numerators.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.numerators",
        "file": "Dart.dart:ui.FontFeature.numerators.1.dart",
        "description": "The Piazzolla font supports the `numr` feature. It causes\nthe digits to be rendered smaller and near the top of the EM box.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_numr.png)"
    },
    {
        "sourcePath": "lib/src/material/autocomplete.dart",
        "sourceLine": 163,
        "id": "material.Autocomplete.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Autocomplete",
        "file": "material.Autocomplete.1.dart",
        "description": "This example shows how to create a very basic Autocomplete widget using the\ndefault UI."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "material.NestedScrollView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "NestedScrollView",
        "file": "material.NestedScrollView.1.dart",
        "description": "This example shows a [NestedScrollView] whose header is the combination of a\n[TabBar] in a [SliverAppBar] and whose body is a [TabBarView]. It uses a\n[SliverOverlapAbsorber]/[SliverOverlapInjector] pair to make the inner lists\nalign correctly, and it uses [SafeArea] to avoid any horizontal disturbances\n(e.g. the \"notch\" on iOS when the phone is horizontal). In addition,\n[PageStorageKey]s are used to remember the scroll position of each tab's\nlist."
    },
    {
        "sourcePath": "lib/src/widgets/table.dart",
        "sourceLine": 170,
        "id": "material.Table.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Table",
        "file": "material.Table.1.dart",
        "description": "This sample shows a `Table` with borders, multiple types of column widths and different vertical cell alignments."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1161,
        "id": "cupertino.DecoratedBoxTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "DecoratedBoxTransition",
        "file": "cupertino.DecoratedBoxTransition.1.dart",
        "description": "The following code implements the [DecoratedBoxTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/material/date_picker.dart",
        "sourceLine": 196,
        "id": "material.showDatePicker.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "showDatePicker",
        "file": "material.showDatePicker.1.dart",
        "description": "This sample demonstrates how to create a restorable Material date picker.\nThis is accomplished by enabling state restoration by specifying\n[MaterialApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [DatePickerDialog] when the button is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 239,
        "id": "cupertino.SlideTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SlideTransition",
        "file": "cupertino.SlideTransition.1.dart",
        "description": "The following code implements the [SlideTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/autofill.dart",
        "sourceLine": 150,
        "id": "cupertino.AutofillGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AutofillGroup",
        "file": "cupertino.AutofillGroup.1.dart",
        "description": "An example form with autofillable fields grouped into different\n`AutofillGroup`s."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1641,
        "id": "material.Scaffold.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "file": "material.Scaffold.2.dart",
        "description": "This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]\nand [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in\norder to center the text within the [Scaffold]. The [FloatingActionButton]\nis connected to a callback that increments a counter.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)"
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 7086,
        "id": "widgets.IgnorePointer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "IgnorePointer",
        "file": "widgets.IgnorePointer.1.dart",
        "description": "The following sample has an [IgnorePointer] widget wrapping the `Column`\nwhich contains a button.\nWhen [ignoring] is set to `true` anything inside the `Column` can\nnot be tapped. When [ignoring] is set to `false` anything\ninside the `Column` can be tapped."
    },
    {
        "sourcePath": "lib/src/material/ink_well.dart",
        "sourceLine": 1210,
        "id": "material.InkWell.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InkWell",
        "file": "material.InkWell.1.dart",
        "description": "Tap the container to cause it to grow. Then, tap it again and hold before\nthe widget reaches its maximum size to observe the clipped ink splash."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 679,
        "id": "widgets.FadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "FadeTransition",
        "file": "widgets.FadeTransition.1.dart",
        "description": "The following code implements the [FadeTransition] using\nthe Flutter logo:"
    },
    {
        "sourcePath": "lib/src/widgets/tween_animation_builder.dart",
        "sourceLine": 116,
        "id": "material.TweenAnimationBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "TweenAnimationBuilder",
        "file": "material.TweenAnimationBuilder.1.dart",
        "description": "This example shows an [IconButton] that \"zooms\" in when the widget first\nbuilds (its size smoothly increases from 0 to 24) and whenever the button\nis pressed, it smoothly changes its size to the new target value of either\n48 or 24."
    },
    {
        "sourcePath": "lib/src/widgets/restoration.dart",
        "sourceLine": 714,
        "id": "cupertino.RestorationMixin.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RestorationMixin",
        "file": "cupertino.RestorationMixin.1.dart",
        "description": "This example demonstrates how to make a simple counter app restorable by\nusing the [RestorationMixin] and a [RestorableInt]."
    },
    {
        "sourcePath": "lib/src/widgets/overscroll_indicator.dart",
        "sourceLine": 122,
        "id": "material.GlowingOverscrollIndicator.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "GlowingOverscrollIndicator",
        "file": "material.GlowingOverscrollIndicator.2.dart",
        "description": "This example demonstrates how to use a [NestedScrollView] to manipulate the\nplacement of a [GlowingOverscrollIndicator] when building a\n[CustomScrollView]. Drag the scrollable to see the bounds of the overscroll\nindicator."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 290,
        "id": "cupertino.LogicalKeySet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "LogicalKeySet",
        "file": "cupertino.LogicalKeySet.1.dart",
        "description": "In the following example, the counter is increased when the following key\nsequences are pressed:\n\n * Control left, then C.\n * Control right, then C.\n * C, then Control left.\n\nBut not when:\n\n * Control left, then A, then C."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 114,
        "id": "widgets.AnimatedWidget.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedWidget",
        "file": "widgets.AnimatedWidget.1.dart",
        "description": "This code defines a widget called `Spinner` that spins a green square\ncontinually. It is built with an [AnimatedWidget]."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 2781,
        "id": "material.FractionallySizedBox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FractionallySizedBox",
        "file": "material.FractionallySizedBox.1.dart",
        "description": "This sample shows a [FractionallySizedBox] whose one child is 50% of\nthe box's size per the width and height factor parameters, and centered\nwithin that box by the alignment parameter."
    },
    {
        "sourcePath": "lib/src/material/icon_button.dart",
        "sourceLine": 129,
        "id": "material.IconButton.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "IconButton",
        "file": "material.IconButton.1.dart",
        "description": "This sample shows an `IconButton` that uses the Material icon \"volume_up\" to\nincrease the volume.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/icon_button.png)"
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 356,
        "id": "material.NestedScrollView.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "NestedScrollView",
        "file": "material.NestedScrollView.2.dart",
        "description": "This simple example shows a [NestedScrollView] whose header contains a\nfloating [SliverAppBar]. By using the [floatHeaderSlivers] property, the\nfloating behavior is coordinated between the outer and inner [Scrollable]s,\nso it behaves as it would in a single scrollable."
    },
    {
        "sourcePath": "lib/src/widgets/animated_list.dart",
        "sourceLine": 776,
        "id": "cupertino.SliverAnimatedList.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverAnimatedList",
        "file": "cupertino.SliverAnimatedList.1.dart",
        "description": "This sample application uses a [SliverAnimatedList] to create an animated\neffect when items are removed or added to the list."
    },
    {
        "sourcePath": "lib/src/widgets/heroes.dart",
        "sourceLine": 206,
        "id": "widgets.Hero.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Hero",
        "file": "widgets.Hero.1.dart",
        "description": "This sample shows a [Hero] used within a [ListTile].\n\nTapping on the Hero-wrapped rectangle triggers a hero\nanimation as a new [MaterialPageRoute] is pushed. Both the size\nand location of the rectangle animates.\n\nBoth widgets use the same [Hero.tag].\n\nThe Hero widget uses the matching tags to identify and execute this\nanimation."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 798,
        "id": "material.SliverFadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SliverFadeTransition",
        "file": "material.SliverFadeTransition.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] that uses a\n[SliverFadeTransition] to fade the list in and out."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "material.RawScrollbar.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "RawScrollbar",
        "file": "material.RawScrollbar.2.dart",
        "description": "This sample shows a [RawScrollbar] that executes a fade animation as\nscrolling occurs. The RawScrollbar will fade into view as the user scrolls,\nand fade out when scrolling stops. The [GridView] uses the\n[PrimaryScrollController] since it has an [Axis.vertical] scroll direction\nand has not been provided a [ScrollController]."
    },
    {
        "sourcePath": "lib/src/material/chip.dart",
        "sourceLine": 283,
        "id": "chip.DeletableChipAttributes.onDeleted.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "chip",
        "element": "DeletableChipAttributes.onDeleted",
        "file": "chip.DeletableChipAttributes.onDeleted.1.dart",
        "description": "This sample shows how to use [onDeleted] to remove an entry when the\ndelete button is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/actions.dart",
        "sourceLine": 1244,
        "id": "material.FocusableActionDetector.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FocusableActionDetector",
        "file": "material.FocusableActionDetector.1.dart",
        "description": "This example shows how keyboard interaction can be added to a custom control\nthat changes color when hovered and focused, and can toggle a light when\nactivated, either by touch or by hitting the `X` key on the keyboard when\nthe \"And Me\" button has the keyboard focus (be sure to use TAB to move the\nfocus to the \"And Me\" button before trying it out).\n\nThis example defines its own key binding for the `X` key, but in this case,\nthere is also a default key binding for [ActivateAction] in the default key\nbindings created by [WidgetsApp] (the parent for [MaterialApp], and\n[CupertinoApp]), so the `ENTER` key will also activate the buttons."
    },
    {
        "sourcePath": "lib/src/widgets/image.dart",
        "sourceLine": 863,
        "id": "widgets.Image.loadingBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Image.loadingBuilder",
        "file": "widgets.Image.loadingBuilder.1.dart",
        "description": "The following sample uses [loadingBuilder] to show a\n[CircularProgressIndicator] while an image loads over the network."
    },
    {
        "sourcePath": "lib/src/material/tabs.dart",
        "sourceLine": 693,
        "id": "material.TabBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "TabBar",
        "file": "material.TabBar.1.dart",
        "description": "This sample shows the implementation of [TabBar] and [TabBarView] using a [DefaultTabController].\nEach [Tab] corresponds to a child of the [TabBarView] in the order they are written."
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "material.SliverFillRemaining.4",
        "channel": "stable",
        "serial": "4",
        "package": "flutter",
        "library": "material",
        "element": "SliverFillRemaining",
        "file": "material.SliverFillRemaining.4.dart",
        "description": "In this sample the [SliverFillRemaining]'s child stretches to fill the\noverscroll area when [fillOverscroll] is true. This sample also features a\nbutton that is pinned to the bottom of the sliver, regardless of size or\noverscroll behavior. Try switching [fillOverscroll] to see the difference.\n\nThis sample only shows the overscroll behavior on devices that support\noverscroll."
    },
    {
        "sourcePath": "lib/src/rendering/sliver_grid.dart",
        "sourceLine": 335,
        "id": "material.SliverGridDelegateWithFixedCrossAxisCount.2",
        "channel": "stable",
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "SliverGridDelegateWithFixedCrossAxisCount",
        "file": "material.SliverGridDelegateWithFixedCrossAxisCount.2.dart",
        "description": "Here is an example using the [mainAxisExtent] property. On a device with a\nscreen width of 800.0, it creates a GridView with each tile with a width of\n200.0 and a height of 150.0."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "widgets.Focus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Focus",
        "file": "widgets.Focus.1.dart",
        "description": "This example shows how to manage focus using the [Focus] and [FocusScope]\nwidgets. See [FocusNode] for a similar example that doesn't use [Focus] or\n[FocusScope]."
    },
    {
        "sourcePath": "lib/src/widgets/autocomplete.dart",
        "sourceLine": 491,
        "id": "widgets.RawAutocomplete.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "RawAutocomplete",
        "file": "widgets.RawAutocomplete.3.dart",
        "description": "This example shows the use of RawAutocomplete in a form."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3340,
        "id": "widgets.AspectRatio.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "widgets",
        "element": "AspectRatio",
        "file": "widgets.AspectRatio.3.dart",
        "description": ""
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1150,
        "id": "cupertino.AnimatedPositioned.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "AnimatedPositioned",
        "file": "cupertino.AnimatedPositioned.1.dart",
        "description": "The following example transitions an AnimatedPositioned\nbetween two states. It adjusts the `height`, `width`, and\n[Positioned] properties when tapped."
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 667,
        "id": "widgets.CharacterActivator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "CharacterActivator",
        "file": "widgets.CharacterActivator.1.dart",
        "description": "In the following example, when a key combination results in a question mark,\nthe counter is increased:"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1041,
        "id": "cupertino.RelativePositionedTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RelativePositionedTransition",
        "file": "cupertino.RelativePositionedTransition.1.dart",
        "description": "The following code implements the [RelativePositionedTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 1002,
        "id": "Dart.dart:ui.FontFeature.proportionalFigures.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.proportionalFigures",
        "file": "Dart.dart:ui.FontFeature.proportionalFigures.1.dart",
        "description": "The Kufam font supports the `pnum` feature. It causes the digits\nto become proportionally-sized, rather than all being the same\nwidth. In this font this is especially noticeable with the digit\n\"1\": normally, the 1 has very noticeable serifs in this\nsans-serif font, but with the proportionally figures enabled,\nthe digit becomes much narrower.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_pnum.png)"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "widgets.SliverFillRemaining.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SliverFillRemaining",
        "file": "widgets.SliverFillRemaining.1.dart",
        "description": "In this sample the [SliverFillRemaining] sizes its [child] to fill the\nremaining extent of the viewport in both axes. The icon is centered in the\nsliver, and would be in any computed extent for the sliver."
    },
    {
        "sourcePath": "lib/src/services/keyboard_key.dart",
        "sourceLine": 126,
        "id": "services.LogicalKeyboardKey.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "services",
        "element": "LogicalKeyboardKey",
        "file": "services.LogicalKeyboardKey.1.dart",
        "description": "This example shows how to detect if the user has selected the logical \"Q\"\nkey."
    },
    {
        "sourcePath": "lib/src/widgets/scrollbar.dart",
        "sourceLine": 859,
        "id": "material.RawScrollbar.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "RawScrollbar",
        "file": "material.RawScrollbar.3.dart",
        "description": "When `isAlwaysShown` is true, the scrollbar thumb will remain visible without\nthe fade animation. This requires that a [ScrollController] is provided to\n`controller` for both the [RawScrollbar] and the [GridView].\nAlternatively, the [PrimaryScrollController] can be used automatically so long\nas it is attached to the singular [ScrollPosition] associated with the GridView."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 924,
        "id": "material.FocusScope.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FocusScope",
        "file": "material.FocusScope.1.dart",
        "description": "This example demonstrates using a [FocusScope] to restrict focus to a particular\nportion of the app. In this case, restricting focus to the visible part of a\nStack."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 864,
        "id": "widgets.AnimatedPadding.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedPadding",
        "file": "widgets.AnimatedPadding.1.dart",
        "description": "The following code implements the [AnimatedPadding] widget, using a [curve] of\n[Curves.easeInOut]."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 3179,
        "id": "widgets.Offstage.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Offstage",
        "file": "widgets.Offstage.1.dart",
        "description": "This example shows a [FlutterLogo] widget when the `_offstage` member field\nis false, and hides it without any room in the parent when it is true. When\noffstage, this app displays a button to get the logo size, which will be\ndisplayed in a [SnackBar]."
    },
    {
        "sourcePath": "lib/src/material/slider.dart",
        "sourceLine": 124,
        "id": "material.Slider.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Slider",
        "file": "material.Slider.1.dart",
        "description": "![A slider widget, consisting of 5 divisions and showing the default value\nindicator.](https://flutter.github.io/assets-for-api-docs/assets/material/slider.png)\n\nThe Sliders value is part of the Stateful widget subclass to change the value\nsetState was called."
    },
    {
        "sourcePath": "lib/src/widgets/focus_scope.dart",
        "sourceLine": 273,
        "id": "material.Focus.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Focus",
        "file": "material.Focus.1.dart",
        "description": "This example shows how to manage focus using the [Focus] and [FocusScope]\nwidgets. See [FocusNode] for a similar example that doesn't use [Focus] or\n[FocusScope]."
    },
    {
        "sourcePath": "lib/src/widgets/dismissible.dart",
        "sourceLine": 114,
        "id": "material.Dismissible.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Dismissible",
        "file": "material.Dismissible.1.dart",
        "description": "This sample shows how you can use the [Dismissible] widget to\nremove list items using swipe gestures. Swipe any of the list\ntiles to the left or right to dismiss them from the [ListView]."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 103,
        "id": "material.ScaffoldMessenger.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "ScaffoldMessenger",
        "file": "material.ScaffoldMessenger.1.dart",
        "description": "Here is an example of showing a [SnackBar] when the user presses a button."
    },
    {
        "sourcePath": "lib/src/widgets/page_view.dart",
        "sourceLine": 607,
        "id": "widgets.PageView.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "PageView",
        "file": "widgets.PageView.1.dart",
        "description": "Here is an example of [PageView]. It creates a centered [Text] in each of the three pages\nwhich scroll horizontally."
    },
    {
        "sourcePath": "../pkg/sky_engine/lib/ui/text.dart",
        "sourceLine": 720,
        "id": "Dart.dart:ui.FontFeature.liningFigures.1",
        "channel": "stable",
        "serial": "1",
        "package": "Dart",
        "library": "dart:ui",
        "element": "FontFeature.liningFigures",
        "file": "Dart.dart:ui.FontFeature.liningFigures.1.dart",
        "description": "The Sorts Mill Goudy font supports the `lnum` feature. It causes\ndigits to fit more seamlessly with capital letters.\n\n\n\n![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/font_feature_lnum.png)"
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1161,
        "id": "widgets.DecoratedBoxTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "DecoratedBoxTransition",
        "file": "widgets.DecoratedBoxTransition.1.dart",
        "description": "The following code implements the [DecoratedBoxTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 487,
        "id": "widgets.SingleActivator.SingleActivator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleActivator.SingleActivator",
        "file": "widgets.SingleActivator.SingleActivator.1.dart",
        "description": "In the following example, the shortcut `Control + C` increases the counter:"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "cupertino.SliverFillRemaining.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "SliverFillRemaining",
        "file": "cupertino.SliverFillRemaining.1.dart",
        "description": "In this sample the [SliverFillRemaining] sizes its [child] to fill the\nremaining extent of the viewport in both axes. The icon is centered in the\nsliver, and would be in any computed extent for the sliver."
    },
    {
        "sourcePath": "lib/src/material/divider.dart",
        "sourceLine": 86,
        "id": "material.Divider.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Divider",
        "file": "material.Divider.1.dart",
        "description": "This sample shows how to display a Divider between an orange and blue box\ninside a column. The Divider is 20 logical pixels in height and contains a\nvertically centered black line that is 5 logical pixels thick. The black\nline is indented by 20 logical pixels.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/material/divider.png)"
    },
    {
        "sourcePath": "lib/src/widgets/sliver_fill.dart",
        "sourceLine": 394,
        "id": "material.SliverFillRemaining.3",
        "channel": "stable",
        "serial": "3",
        "package": "flutter",
        "library": "material",
        "element": "SliverFillRemaining",
        "file": "material.SliverFillRemaining.3.dart",
        "description": "In this sample the [SliverFillRemaining] defers to the size of its [child]\nbecause the [SliverConstraints.precedingScrollExtent] has gone\nbeyond that of the viewport's main axis."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_notifier.dart",
        "sourceLine": 128,
        "id": "material.InheritedNotifier.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InheritedNotifier",
        "file": "material.InheritedNotifier.1.dart",
        "description": "This example shows three spinning squares that use the value of the notifier\non an ancestor [InheritedNotifier] (`SpinModel`) to give them their\nrotation. The [InheritedNotifier] doesn't need to know about the children,\nand the `notifier` argument doesn't need to be an animation controller, it\ncan be anything that implements [Listenable] (like a [ChangeNotifier]).\n\nThe `SpinModel` class could just as easily listen to another object (say, a\nseparate object that keeps the value of an input or data model value) that\nis a [Listenable], and get the value from that. The descendants also don't\nneed to have an instance of the [InheritedNotifier] in order to use it, they\njust need to know that there is one in their ancestry. This can help with\ndecoupling widgets from their models."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 942,
        "id": "cupertino.PositionedTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "PositionedTransition",
        "file": "cupertino.PositionedTransition.1.dart",
        "description": "The following code implements the [PositionedTransition] as seen in the video\nabove:"
    },
    {
        "sourcePath": "lib/src/widgets/autofill.dart",
        "sourceLine": 150,
        "id": "widgets.AutofillGroup.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AutofillGroup",
        "file": "widgets.AutofillGroup.1.dart",
        "description": "An example form with autofillable fields grouped into different\n`AutofillGroup`s."
    },
    {
        "sourcePath": "lib/src/material/tooltip.dart",
        "sourceLine": 90,
        "id": "material.Tooltip.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Tooltip",
        "file": "material.Tooltip.1.dart",
        "description": "This example show a basic [Tooltip] which has a [Text] as child.\n[message] contains your label to be shown by the tooltip when\nthe child that Tooltip wraps is hovered over on web or desktop. On mobile,\nthe tooltip is shown when the widget is long pressed."
    },
    {
        "sourcePath": "lib/src/widgets/inherited_notifier.dart",
        "sourceLine": 128,
        "id": "cupertino.InheritedNotifier.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "InheritedNotifier",
        "file": "cupertino.InheritedNotifier.1.dart",
        "description": "This example shows three spinning squares that use the value of the notifier\non an ancestor [InheritedNotifier] (`SpinModel`) to give them their\nrotation. The [InheritedNotifier] doesn't need to know about the children,\nand the `notifier` argument doesn't need to be an animation controller, it\ncan be anything that implements [Listenable] (like a [ChangeNotifier]).\n\nThe `SpinModel` class could just as easily listen to another object (say, a\nseparate object that keeps the value of an input or data model value) that\nis a [Listenable], and get the value from that. The descendants also don't\nneed to have an instance of the [InheritedNotifier] in order to use it, they\njust need to know that there is one in their ancestry. This can help with\ndecoupling widgets from their models."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 559,
        "id": "material.SizeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SizeTransition",
        "file": "material.SizeTransition.1.dart",
        "description": "This code defines a widget that uses [SizeTransition] to change the size\nof [FlutterLogo] continually. It is built with a [Scaffold]\nwhere the internal widget has space to change its size."
    },
    {
        "sourcePath": "lib/src/widgets/nested_scroll_view.dart",
        "sourceLine": 550,
        "id": "material.NestedScrollViewState.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "NestedScrollViewState",
        "file": "material.NestedScrollViewState.1.dart",
        "description": "[NestedScrollViewState] can be obtained using a [GlobalKey].\nUsing the following setup, you can access the inner scroll controller\nusing `globalKey.currentState.innerController`."
    },
    {
        "sourcePath": "lib/src/material/input_decorator.dart",
        "sourceLine": 3111,
        "id": "material.InputDecoration.suffixIconConstraints.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "InputDecoration.suffixIconConstraints",
        "file": "material.InputDecoration.suffixIconConstraints.1.dart",
        "description": "This example shows the differences between two `TextField` widgets when\n[suffixIconConstraints] is set to the default value and when one is not.\n\nNote that [isDense] must be set to true to be able to\nset the constraints smaller than 48px.\n\nIf null, [BoxConstraints] with a minimum width and height of 48px is\nused."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 1596,
        "id": "cupertino.FittedBox.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "FittedBox",
        "file": "cupertino.FittedBox.1.dart",
        "description": "In this example, the image is stretched to fill the entire [Container], which would\nnot happen normally without using FittedBox."
    },
    {
        "sourcePath": "lib/src/widgets/implicit_animations.dart",
        "sourceLine": 1986,
        "id": "material.SliverAnimatedOpacity.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "SliverAnimatedOpacity",
        "file": "material.SliverAnimatedOpacity.1.dart",
        "description": "Creates a [CustomScrollView] with a [SliverFixedExtentList] and a\n[FloatingActionButton]. Pressing the button animates the lists' opacity."
    },
    {
        "sourcePath": "lib/src/widgets/interactive_viewer.dart",
        "sourceLine": 393,
        "id": "widgets.InteractiveViewer.builder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "InteractiveViewer.builder",
        "file": "widgets.InteractiveViewer.builder.1.dart",
        "description": "This example shows how to use builder to create a [Table] whose cell\ncontents are only built when they are visible. Built and remove cells are\nlogged in the console for illustration."
    },
    {
        "sourcePath": "lib/src/animation/curves.dart",
        "sourceLine": 512,
        "id": "cupertino.Curve2D.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "Curve2D",
        "file": "cupertino.Curve2D.1.dart",
        "description": "This example shows how to use a [Curve2D] to modify the position of a widget\nso that it can follow an arbitrary path."
    },
    {
        "sourcePath": "lib/src/widgets/notification_listener.dart",
        "sourceLine": 103,
        "id": "widgets.Notification.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Notification",
        "file": "widgets.Notification.1.dart",
        "description": "This example shows a [NotificationListener] widget\nthat listens for [ScrollNotification] notifications. When a scroll\nevent occurs in the [NestedScrollView],\nthis widget is notified. The events could be either a\n[ScrollStartNotification]or[ScrollEndNotification]."
    },
    {
        "sourcePath": "lib/src/widgets/overflow_bar.dart",
        "sourceLine": 96,
        "id": "cupertino.OverflowBar.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "OverflowBar",
        "file": "cupertino.OverflowBar.1.dart",
        "description": "This example defines a simple approximation of a dialog\nlayout, where the layout of the dialog's action buttons are\ndefined by an [OverflowBar]. The content is wrapped in a\n[SingleChildScrollView], so that if overflow occurs, the\naction buttons will still be accessible by scrolling,\nno matter how much vertical space is available."
    },
    {
        "sourcePath": "lib/src/widgets/framework.dart",
        "sourceLine": 2383,
        "id": "cupertino.BuildOwner.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "BuildOwner",
        "file": "cupertino.BuildOwner.1.dart",
        "description": "This example shows how to build an off-screen widget tree used to measure\nthe layout size of the rendered tree. For some use cases, the simpler\n[Offstage] widget may be a better alternative to this approach."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 679,
        "id": "material.FadeTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FadeTransition",
        "file": "material.FadeTransition.1.dart",
        "description": "The following code implements the [FadeTransition] using\nthe Flutter logo:"
    },
    {
        "sourcePath": "lib/src/widgets/routes.dart",
        "sourceLine": 1993,
        "id": "material.showGeneralDialog.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "showGeneralDialog",
        "file": "material.showGeneralDialog.1.dart",
        "description": "This sample demonstrates how to create a restorable dialog. This is\naccomplished by enabling state restoration by specifying\n[WidgetsApp.restorationScopeId] and using [Navigator.restorablePush] to\npush [RawDialogRoute] when the button is tapped.\n\n{@macro flutter.widgets.RestorationManager}"
    },
    {
        "sourcePath": "lib/src/widgets/shortcuts.dart",
        "sourceLine": 290,
        "id": "widgets.LogicalKeySet.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "LogicalKeySet",
        "file": "widgets.LogicalKeySet.1.dart",
        "description": "In the following example, the counter is increased when the following key\nsequences are pressed:\n\n * Control left, then C.\n * Control right, then C.\n * C, then Control left.\n\nBut not when:\n\n * Control left, then A, then C."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 7187,
        "id": "material.AbsorbPointer.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AbsorbPointer",
        "file": "material.AbsorbPointer.1.dart",
        "description": "The following sample has an [AbsorbPointer] widget wrapping the button on\ntop of the stack, which absorbs pointer events, preventing its child button\n__and__ the button below it in the stack from receiving the pointer events."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 1461,
        "id": "widgets.Navigator.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Navigator",
        "file": "widgets.Navigator.1.dart",
        "description": "The following example demonstrates how a nested [Navigator] can be used to\npresent a standalone user registration journey.\n\nEven though this example uses two [Navigator]s to demonstrate nested\n[Navigator]s, a similar result is possible using only a single [Navigator].\n\nRun this example with `flutter run --route=/signup` to start it with\nthe signup flow instead of on the home page."
    },
    {
        "sourcePath": "lib/src/widgets/restoration_properties.dart",
        "sourceLine": 106,
        "id": "cupertino.RestorableValue.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "cupertino",
        "element": "RestorableValue",
        "file": "cupertino.RestorableValue.1.dart",
        "description": "A [StatefulWidget] that has a restorable [int] property."
    },
    {
        "sourcePath": "lib/src/widgets/transitions.dart",
        "sourceLine": 1361,
        "id": "widgets.DefaultTextStyleTransition.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "DefaultTextStyleTransition",
        "file": "widgets.DefaultTextStyleTransition.1.dart",
        "description": "The following code implements the [DefaultTextStyleTransition] that shows\na transition between thick blue font and thin red font."
    },
    {
        "sourcePath": "lib/src/widgets/animated_switcher.dart",
        "sourceLine": 142,
        "id": "widgets.AnimatedSwitcher.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "AnimatedSwitcher",
        "file": "widgets.AnimatedSwitcher.1.dart",
        "description": "This sample shows a counter that animates the scale of a text widget\nwhenever the value changes."
    },
    {
        "sourcePath": "lib/src/widgets/form.dart",
        "sourceLine": 74,
        "id": "material.Form.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Form",
        "file": "material.Form.1.dart",
        "description": "This example shows a [Form] with one [TextFormField] to enter an email\naddress and an [ElevatedButton] to submit the form. A [GlobalKey] is used here\nto identify the [Form] and validate input.\n\n![](https://flutter.github.io/assets-for-api-docs/assets/widgets/form.png)"
    },
    {
        "sourcePath": "lib/src/widgets/layout_builder.dart",
        "sourceLine": 309,
        "id": "material.LayoutBuilder.1",
        "channel": "stable",
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "LayoutBuilder",
        "file": "material.LayoutBuilder.1.dart",
        "description": "This example uses a [LayoutBuilder] to build a different widget depending on the available width. Resize the\nDartPad window to see [LayoutBuilder] in action!"
    }
]